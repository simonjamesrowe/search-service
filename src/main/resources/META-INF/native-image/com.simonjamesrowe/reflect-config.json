[
  {
    "name": "[B"
  },
  {
    "name": "[C"
  },
  {
    "name": "[D"
  },
  {
    "name": "[F"
  },
  {
    "name": "[I"
  },
  {
    "name": "[J"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.deser.Deserializers;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.deser.KeyDeserializers;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.deser.ValueInstantiators;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.ser.Serializers;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.type.TypeModifier;"
  },
  {
    "name": "[Ljava.lang.Class;"
  },
  {
    "name": "[Ljava.lang.Object;"
  },
  {
    "name": "[Ljava.lang.String;"
  },
  {
    "name": "[Ljava.lang.annotation.Annotation;"
  },
  {
    "name": "[Ljava.lang.reflect.Constructor;"
  },
  {
    "name": "[Ljava.lang.reflect.TypeVariable;"
  },
  {
    "name": "[Ljavax.management.openmbean.CompositeData;"
  },
  {
    "name": "[Lorg.springframework.boot.context.config.ConfigDataLocation;"
  },
  {
    "name": "[Lorg.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor$MappingsProvider;"
  },
  {
    "name": "[Lorg.springframework.core.io.InputStreamSource;"
  },
  {
    "name": "[Lorg.springframework.core.io.Resource;",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "[Lorg.springframework.util.ConcurrentReferenceHashMap$Segment;"
  },
  {
    "name": "[Lorg.springframework.web.bind.annotation.RequestMethod;"
  },
  {
    "name": "[Lscala.Tuple2;"
  },
  {
    "name": "[Lsun.security.pkcs.SignerInfo;"
  },
  {
    "name": "[S"
  },
  {
    "name": "[Z"
  },
  {
    "name": "[[I"
  },
  {
    "name": "apple.security.AppleProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "boolean",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "brave.Clock"
  },
  {
    "name": "brave.CurrentSpanCustomizer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "annotate",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "name",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "tag",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "brave.ErrorParser"
  },
  {
    "name": "brave.ScopedSpan"
  },
  {
    "name": "brave.Span",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "queriedMethods": [
      {
        "name": "abandon",
        "parameterTypes": []
      },
      {
        "name": "annotate",
        "parameterTypes": [
          "long",
          "java.lang.String"
        ]
      },
      {
        "name": "annotate",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "context",
        "parameterTypes": []
      },
      {
        "name": "customizer",
        "parameterTypes": []
      },
      {
        "name": "error",
        "parameterTypes": [
          "java.lang.Throwable"
        ]
      },
      {
        "name": "finish",
        "parameterTypes": []
      },
      {
        "name": "finish",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": []
      },
      {
        "name": "isNoop",
        "parameterTypes": []
      },
      {
        "name": "kind",
        "parameterTypes": [
          "brave.Span$Kind"
        ]
      },
      {
        "name": "name",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "remoteEndpoint",
        "parameterTypes": [
          "zipkin2.Endpoint"
        ]
      },
      {
        "name": "remoteIpAndPort",
        "parameterTypes": [
          "java.lang.String",
          "int"
        ]
      },
      {
        "name": "remoteServiceName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "start",
        "parameterTypes": []
      },
      {
        "name": "start",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "tag",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "brave.Span$Kind"
  },
  {
    "name": "brave.Span$Subclass0",
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "brave.SpanCustomizer",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "brave.Tracer",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "nextSpan",
        "parameterTypes": [
          "brave.propagation.TraceContextOrSamplingFlags"
        ]
      },
      {
        "name": "toString",
        "parameterTypes": []
      },
      {
        "name": "withSpanInScope",
        "parameterTypes": [
          "brave.Span"
        ]
      }
    ]
  },
  {
    "name": "brave.Tracer$SpanInScope",
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "brave.Tracing",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "clock",
        "parameterTypes": [
          "brave.propagation.TraceContext"
        ]
      },
      {
        "name": "current",
        "parameterTypes": []
      },
      {
        "name": "currentTracer",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.Tracing$Builder"
  },
  {
    "name": "brave.Tracing$Default",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "close",
        "parameterTypes": []
      },
      {
        "name": "currentTraceContext",
        "parameterTypes": []
      },
      {
        "name": "errorParser",
        "parameterTypes": []
      },
      {
        "name": "isNoop",
        "parameterTypes": []
      },
      {
        "name": "propagation",
        "parameterTypes": []
      },
      {
        "name": "propagationFactory",
        "parameterTypes": []
      },
      {
        "name": "sampler",
        "parameterTypes": []
      },
      {
        "name": "setNoop",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "toString",
        "parameterTypes": []
      },
      {
        "name": "tracer",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.baggage.BaggagePropagation$FactoryBuilder",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "brave.baggage.BaggagePropagationConfig"
  },
  {
    "name": "brave.baggage.CorrelationScopeConfig"
  },
  {
    "name": "brave.baggage.CorrelationScopeDecorator",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "brave.baggage.CorrelationScopeDecorator$Builder",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "add",
        "parameterTypes": [
          "brave.baggage.CorrelationScopeConfig"
        ]
      },
      {
        "name": "build",
        "parameterTypes": []
      },
      {
        "name": "clear",
        "parameterTypes": []
      },
      {
        "name": "configs",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.baggage.CorrelationScopeDecorator$Multiple",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "decorateScope",
        "parameterTypes": [
          "brave.propagation.TraceContext",
          "brave.propagation.CurrentTraceContext$Scope"
        ]
      }
    ]
  },
  {
    "name": "brave.context.slf4j.MDCScopeDecorator$Builder",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "brave.handler.MutableSpan"
  },
  {
    "name": "brave.handler.SpanHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "begin",
        "parameterTypes": [
          "brave.propagation.TraceContext",
          "brave.handler.MutableSpan",
          "brave.propagation.TraceContext"
        ]
      },
      {
        "name": "handlesAbandoned",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.handler.SpanHandler$Cause"
  },
  {
    "name": "brave.http.HttpClientParser"
  },
  {
    "name": "brave.http.HttpRequestParser"
  },
  {
    "name": "brave.http.HttpResponseParser"
  },
  {
    "name": "brave.http.HttpSampler"
  },
  {
    "name": "brave.http.HttpServerParser"
  },
  {
    "name": "brave.http.HttpTracing",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "close",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.http.HttpTracing$Builder"
  },
  {
    "name": "brave.internal.Nullable",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "brave.internal.recorder.PendingSpans"
  },
  {
    "name": "brave.kafka.clients.KafkaTracing"
  },
  {
    "name": "brave.kafka.streams.KafkaStreamsTracing",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "brave.kafka.streams.KafkaStreamsTracing$Builder"
  },
  {
    "name": "brave.messaging.MessagingTracing",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "close",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.messaging.MessagingTracing$Builder"
  },
  {
    "name": "brave.propagation.CurrentTraceContext",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "executor",
        "parameterTypes": [
          "java.util.concurrent.Executor"
        ]
      },
      {
        "name": "executorService",
        "parameterTypes": [
          "java.util.concurrent.ExecutorService"
        ]
      },
      {
        "name": "maybeScope",
        "parameterTypes": [
          "brave.propagation.TraceContext"
        ]
      },
      {
        "name": "wrap",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      },
      {
        "name": "wrap",
        "parameterTypes": [
          "java.util.concurrent.Callable"
        ]
      }
    ]
  },
  {
    "name": "brave.propagation.CurrentTraceContext$Builder",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "brave.propagation.CurrentTraceContext$Scope"
  },
  {
    "name": "brave.propagation.CurrentTraceContext$ScopeDecorator",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "brave.propagation.Propagation",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "brave.propagation.Propagation$Factory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "get",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.propagation.Propagation$Getter"
  },
  {
    "name": "brave.propagation.Propagation$KeyFactory"
  },
  {
    "name": "brave.propagation.Propagation$Setter"
  },
  {
    "name": "brave.propagation.SamplingFlags"
  },
  {
    "name": "brave.propagation.ThreadLocalCurrentTraceContext",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "get",
        "parameterTypes": []
      },
      {
        "name": "newScope",
        "parameterTypes": [
          "brave.propagation.TraceContext"
        ]
      }
    ]
  },
  {
    "name": "brave.propagation.ThreadLocalCurrentTraceContext$Builder",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "addScopeDecorator",
        "parameterTypes": [
          "brave.propagation.CurrentTraceContext$ScopeDecorator"
        ]
      },
      {
        "name": "build",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.propagation.TraceContext"
  },
  {
    "name": "brave.propagation.TraceContext$Extractor"
  },
  {
    "name": "brave.propagation.TraceContext$Injector"
  },
  {
    "name": "brave.propagation.TraceContextOrSamplingFlags",
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "brave.rpc.RpcRequestParser"
  },
  {
    "name": "brave.rpc.RpcResponseParser"
  },
  {
    "name": "brave.rpc.RpcTracing",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "close",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.rpc.RpcTracing$Builder"
  },
  {
    "name": "brave.sampler.Sampler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "create",
        "parameterTypes": [
          "float"
        ]
      }
    ]
  },
  {
    "name": "brave.sampler.Sampler$2",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "isSampled",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.sampler.SamplerFunction",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "brave.sampler.SamplerFunctions$Constants",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "valueOf",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "values",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "brave.sampler.SamplerFunctions$Constants$1",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "toString",
        "parameterTypes": []
      },
      {
        "name": "trySample",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.LoggerContext"
  },
  {
    "name": "ch.qos.logback.classic.pattern.DateConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LevelConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LineSeparatorConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LoggerConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.MDCConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.MessageConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.ThreadConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.annotation.JacksonAnnotation",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "com.fasterxml.jackson.annotation.JsonAutoDetect$Value"
  },
  {
    "name": "com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility"
  },
  {
    "name": "com.fasterxml.jackson.annotation.JsonIgnore",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "com.fasterxml.jackson.annotation.JsonInclude$Include"
  },
  {
    "name": "com.fasterxml.jackson.annotation.JsonInclude$Value"
  },
  {
    "name": "com.fasterxml.jackson.annotation.JsonSetter$Value"
  },
  {
    "name": "com.fasterxml.jackson.annotation.JsonTypeInfo$As"
  },
  {
    "name": "com.fasterxml.jackson.annotation.PropertyAccessor"
  },
  {
    "name": "com.fasterxml.jackson.core.Base64Variant"
  },
  {
    "name": "com.fasterxml.jackson.core.FormatSchema"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonEncoding"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonFactory"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonFactory$Feature"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonGenerator"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonGenerator$Feature"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonParser"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonParser$Feature"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonProcessingException"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonToken"
  },
  {
    "name": "com.fasterxml.jackson.core.ObjectCodec",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getJsonFactory",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.core.PrettyPrinter"
  },
  {
    "name": "com.fasterxml.jackson.core.StreamReadFeature"
  },
  {
    "name": "com.fasterxml.jackson.core.StreamWriteFeature"
  },
  {
    "name": "com.fasterxml.jackson.core.TreeCodec",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "com.fasterxml.jackson.core.TreeNode"
  },
  {
    "name": "com.fasterxml.jackson.core.Version"
  },
  {
    "name": "com.fasterxml.jackson.core.Versioned",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.fasterxml.jackson.core.exc.StreamReadException"
  },
  {
    "name": "com.fasterxml.jackson.core.exc.StreamWriteException"
  },
  {
    "name": "com.fasterxml.jackson.core.io.CharacterEscapes"
  },
  {
    "name": "com.fasterxml.jackson.core.type.ResolvedType"
  },
  {
    "name": "com.fasterxml.jackson.core.type.TypeReference"
  },
  {
    "name": "com.fasterxml.jackson.databind.AnnotationIntrospector"
  },
  {
    "name": "com.fasterxml.jackson.databind.DatabindException"
  },
  {
    "name": "com.fasterxml.jackson.databind.DeserializationConfig"
  },
  {
    "name": "com.fasterxml.jackson.databind.DeserializationContext"
  },
  {
    "name": "com.fasterxml.jackson.databind.DeserializationFeature"
  },
  {
    "name": "com.fasterxml.jackson.databind.InjectableValues"
  },
  {
    "name": "com.fasterxml.jackson.databind.JavaType"
  },
  {
    "name": "com.fasterxml.jackson.databind.JsonDeserializer"
  },
  {
    "name": "com.fasterxml.jackson.databind.JsonMappingException"
  },
  {
    "name": "com.fasterxml.jackson.databind.JsonNode"
  },
  {
    "name": "com.fasterxml.jackson.databind.JsonSerializer"
  },
  {
    "name": "com.fasterxml.jackson.databind.KeyDeserializer"
  },
  {
    "name": "com.fasterxml.jackson.databind.MapperFeature"
  },
  {
    "name": "com.fasterxml.jackson.databind.MappingIterator"
  },
  {
    "name": "com.fasterxml.jackson.databind.Module",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getDependencies",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.Module$SetupContext"
  },
  {
    "name": "com.fasterxml.jackson.databind.ObjectMapper",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "createArrayNode",
        "parameterTypes": []
      },
      {
        "name": "createObjectNode",
        "parameterTypes": []
      },
      {
        "name": "getFactory",
        "parameterTypes": []
      },
      {
        "name": "missingNode",
        "parameterTypes": []
      },
      {
        "name": "nullNode",
        "parameterTypes": []
      },
      {
        "name": "readTree",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser"
        ]
      },
      {
        "name": "readValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "com.fasterxml.jackson.core.type.ResolvedType"
        ]
      },
      {
        "name": "readValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "com.fasterxml.jackson.core.type.TypeReference"
        ]
      },
      {
        "name": "readValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "java.lang.Class"
        ]
      },
      {
        "name": "readValues",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "com.fasterxml.jackson.core.type.ResolvedType"
        ]
      },
      {
        "name": "readValues",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "com.fasterxml.jackson.core.type.TypeReference"
        ]
      },
      {
        "name": "readValues",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "java.lang.Class"
        ]
      },
      {
        "name": "treeAsTokens",
        "parameterTypes": [
          "com.fasterxml.jackson.core.TreeNode"
        ]
      },
      {
        "name": "treeToValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.TreeNode",
          "java.lang.Class"
        ]
      },
      {
        "name": "version",
        "parameterTypes": []
      },
      {
        "name": "writeTree",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonGenerator",
          "com.fasterxml.jackson.core.TreeNode"
        ]
      },
      {
        "name": "writeValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonGenerator",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping"
  },
  {
    "name": "com.fasterxml.jackson.databind.ObjectReader"
  },
  {
    "name": "com.fasterxml.jackson.databind.ObjectWriter"
  },
  {
    "name": "com.fasterxml.jackson.databind.PropertyNamingStrategy"
  },
  {
    "name": "com.fasterxml.jackson.databind.SerializationConfig"
  },
  {
    "name": "com.fasterxml.jackson.databind.SerializationFeature",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "com.fasterxml.jackson.databind.SerializerProvider"
  },
  {
    "name": "com.fasterxml.jackson.databind.cfg.ConstructorDetector"
  },
  {
    "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes"
  },
  {
    "name": "com.fasterxml.jackson.databind.cfg.HandlerInstantiator"
  },
  {
    "name": "com.fasterxml.jackson.databind.cfg.MutableCoercionConfig"
  },
  {
    "name": "com.fasterxml.jackson.databind.cfg.MutableConfigOverride"
  },
  {
    "name": "com.fasterxml.jackson.databind.deser.BeanDeserializerModifier"
  },
  {
    "name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext"
  },
  {
    "name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler"
  },
  {
    "name": "com.fasterxml.jackson.databind.deser.ValueInstantiator"
  },
  {
    "name": "com.fasterxml.jackson.databind.ext.Java7HandlersImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy$Provider"
  },
  {
    "name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector"
  },
  {
    "name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver"
  },
  {
    "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker"
  },
  {
    "name": "com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper"
  },
  {
    "name": "com.fasterxml.jackson.databind.jsonschema.JsonSchema"
  },
  {
    "name": "com.fasterxml.jackson.databind.jsontype.NamedType"
  },
  {
    "name": "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator"
  },
  {
    "name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver"
  },
  {
    "name": "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder"
  },
  {
    "name": "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver"
  },
  {
    "name": "com.fasterxml.jackson.databind.module.SimpleDeserializers"
  },
  {
    "name": "com.fasterxml.jackson.databind.module.SimpleKeyDeserializers"
  },
  {
    "name": "com.fasterxml.jackson.databind.module.SimpleModule",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "addAbstractTypeMapping",
        "parameterTypes": [
          "java.lang.Class",
          "java.lang.Class"
        ]
      },
      {
        "name": "addDeserializer",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.JsonDeserializer"
        ]
      },
      {
        "name": "addKeyDeserializer",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.KeyDeserializer"
        ]
      },
      {
        "name": "addKeySerializer",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.JsonSerializer"
        ]
      },
      {
        "name": "addSerializer",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.JsonSerializer"
        ]
      },
      {
        "name": "addSerializer",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.JsonSerializer"
        ]
      },
      {
        "name": "addValueInstantiator",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.deser.ValueInstantiator"
        ]
      },
      {
        "name": "getModuleName",
        "parameterTypes": []
      },
      {
        "name": "getTypeId",
        "parameterTypes": []
      },
      {
        "name": "registerSubtypes",
        "parameterTypes": [
          "java.util.Collection"
        ]
      },
      {
        "name": "registerSubtypes",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.jsontype.NamedType[]"
        ]
      },
      {
        "name": "registerSubtypes",
        "parameterTypes": [
          "java.lang.Class[]"
        ]
      },
      {
        "name": "setAbstractTypes",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver"
        ]
      },
      {
        "name": "setDeserializerModifier",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.deser.BeanDeserializerModifier"
        ]
      },
      {
        "name": "setDeserializers",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleDeserializers"
        ]
      },
      {
        "name": "setKeyDeserializers",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleKeyDeserializers"
        ]
      },
      {
        "name": "setKeySerializers",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleSerializers"
        ]
      },
      {
        "name": "setMixInAnnotation",
        "parameterTypes": [
          "java.lang.Class",
          "java.lang.Class"
        ]
      },
      {
        "name": "setSerializerModifier",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.ser.BeanSerializerModifier"
        ]
      },
      {
        "name": "setSerializers",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleSerializers"
        ]
      },
      {
        "name": "setValueInstantiators",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleValueInstantiators"
        ]
      },
      {
        "name": "setupModule",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.Module$SetupContext"
        ]
      },
      {
        "name": "version",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.module.SimpleSerializers"
  },
  {
    "name": "com.fasterxml.jackson.databind.module.SimpleValueInstantiators"
  },
  {
    "name": "com.fasterxml.jackson.databind.node.ArrayNode"
  },
  {
    "name": "com.fasterxml.jackson.databind.node.JsonNodeFactory"
  },
  {
    "name": "com.fasterxml.jackson.databind.node.ObjectNode"
  },
  {
    "name": "com.fasterxml.jackson.databind.ser.BeanSerializerModifier"
  },
  {
    "name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider"
  },
  {
    "name": "com.fasterxml.jackson.databind.ser.FilterProvider"
  },
  {
    "name": "com.fasterxml.jackson.databind.ser.SerializerFactory"
  },
  {
    "name": "com.fasterxml.jackson.databind.type.LogicalType"
  },
  {
    "name": "com.fasterxml.jackson.databind.type.TypeFactory"
  },
  {
    "name": "com.fasterxml.jackson.dataformat.cbor.CBORFactory"
  },
  {
    "name": "com.fasterxml.jackson.dataformat.smile.SmileFactory"
  },
  {
    "name": "com.fasterxml.jackson.datatype.jdk8.Jdk8Module",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.module.kotlin.KotlinModule",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ],
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "int",
          "boolean",
          "boolean"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "int",
          "boolean",
          "boolean",
          "boolean"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "int",
          "boolean",
          "boolean",
          "boolean",
          "com.fasterxml.jackson.module.kotlin.SingletonSupport",
          "boolean"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "com.fasterxml.jackson.module.kotlin.KotlinModule$Builder"
        ]
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.module.kotlin.KotlinModule$Builder"
  },
  {
    "name": "com.fasterxml.jackson.module.kotlin.SingletonSupport"
  },
  {
    "name": "com.fasterxml.jackson.module.paramnames.ParameterNamesModule",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "equals",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hashCode",
        "parameterTypes": []
      },
      {
        "name": "setupModule",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.Module$SetupContext"
        ]
      }
    ]
  },
  {
    "name": "com.jayway.jsonpath.internal.function.text.Length",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.cms.dto.BlogResponseDTO",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "boolean",
          "java.util.List",
          "java.time.ZonedDateTime",
          "java.time.ZonedDateTime",
          "java.util.List",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO"
        ]
      },
      {
        "name": "getContent",
        "parameterTypes": []
      },
      {
        "name": "getCreatedAt",
        "parameterTypes": []
      },
      {
        "name": "getId",
        "parameterTypes": []
      },
      {
        "name": "getImage",
        "parameterTypes": []
      },
      {
        "name": "getPublished",
        "parameterTypes": []
      },
      {
        "name": "getShortDescription",
        "parameterTypes": []
      },
      {
        "name": "getSkills",
        "parameterTypes": []
      },
      {
        "name": "getTags",
        "parameterTypes": []
      },
      {
        "name": "getTitle",
        "parameterTypes": []
      },
      {
        "name": "getUpdatedAt",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.cms.dto.CMSObject",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "com.simonjamesrowe.model.cms.dto.ImageResponseDTO",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "int",
          "int",
          "int",
          "java.lang.String",
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO$ImageFormats"
        ]
      },
      {
        "name": "getFormats",
        "parameterTypes": []
      },
      {
        "name": "getHeight",
        "parameterTypes": []
      },
      {
        "name": "getMime",
        "parameterTypes": []
      },
      {
        "name": "getName",
        "parameterTypes": []
      },
      {
        "name": "getSize",
        "parameterTypes": []
      },
      {
        "name": "getUrl",
        "parameterTypes": []
      },
      {
        "name": "getWidth",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.cms.dto.ImageResponseDTO$ImageFormats",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO",
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO",
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO",
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO"
        ]
      },
      {
        "name": "getLarge",
        "parameterTypes": []
      },
      {
        "name": "getMedium",
        "parameterTypes": []
      },
      {
        "name": "getSmall",
        "parameterTypes": []
      },
      {
        "name": "getThumbnail",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.cms.dto.JobResponseDTO",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO",
          "java.time.ZonedDateTime",
          "java.time.ZonedDateTime",
          "java.time.LocalDate",
          "java.time.LocalDate",
          "boolean",
          "boolean",
          "java.lang.String"
        ]
      },
      {
        "name": "getCompany",
        "parameterTypes": []
      },
      {
        "name": "getCompanyImage",
        "parameterTypes": []
      },
      {
        "name": "getCompanyUrl",
        "parameterTypes": []
      },
      {
        "name": "getCreatedAt",
        "parameterTypes": []
      },
      {
        "name": "getEducation",
        "parameterTypes": []
      },
      {
        "name": "getEndDate",
        "parameterTypes": []
      },
      {
        "name": "getId",
        "parameterTypes": []
      },
      {
        "name": "getIncludeOnResume",
        "parameterTypes": []
      },
      {
        "name": "getLocation",
        "parameterTypes": []
      },
      {
        "name": "getLongDescription",
        "parameterTypes": []
      },
      {
        "name": "getShortDescription",
        "parameterTypes": []
      },
      {
        "name": "getStartDate",
        "parameterTypes": []
      },
      {
        "name": "getTitle",
        "parameterTypes": []
      },
      {
        "name": "getUpdatedAt",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.cms.dto.SkillResponseDTO",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.time.ZonedDateTime",
          "java.time.ZonedDateTime",
          "java.lang.String",
          "double",
          "java.lang.Integer",
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO",
          "boolean"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.time.ZonedDateTime",
          "java.time.ZonedDateTime",
          "java.lang.String",
          "double",
          "java.lang.Integer",
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO",
          "boolean",
          "int",
          "kotlin.jvm.internal.DefaultConstructorMarker"
        ]
      },
      {
        "name": "getCreatedAt",
        "parameterTypes": []
      },
      {
        "name": "getDescription",
        "parameterTypes": []
      },
      {
        "name": "getId",
        "parameterTypes": []
      },
      {
        "name": "getImage",
        "parameterTypes": []
      },
      {
        "name": "getIncludeOnResume",
        "parameterTypes": []
      },
      {
        "name": "getName",
        "parameterTypes": []
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "getRating",
        "parameterTypes": []
      },
      {
        "name": "getUpdatedAt",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.cms.dto.SkillsGroupResponseDTO",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.time.ZonedDateTime",
          "java.time.ZonedDateTime",
          "java.lang.String",
          "double",
          "java.lang.Integer",
          "com.simonjamesrowe.model.cms.dto.ImageResponseDTO",
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.cms.dto.TagResponseDTO",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.time.ZonedDateTime",
          "java.time.ZonedDateTime",
          "int"
        ]
      },
      {
        "name": "getCreatedAt",
        "parameterTypes": []
      },
      {
        "name": "getId",
        "parameterTypes": []
      },
      {
        "name": "getName",
        "parameterTypes": []
      },
      {
        "name": "getUpdatedAt",
        "parameterTypes": []
      },
      {
        "name": "getVersion",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.cms.dto.WebhookEventDTO",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.time.ZonedDateTime",
          "java.lang.String",
          "com.fasterxml.jackson.databind.JsonNode"
        ]
      },
      {
        "name": "getCreatedAt",
        "parameterTypes": []
      },
      {
        "name": "getEntry",
        "parameterTypes": []
      },
      {
        "name": "getEvent",
        "parameterTypes": []
      },
      {
        "name": "getModel",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.config.JacksonConfig",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "com.simonjamesrowe.model.serialization.WebhookEventDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.model.serialization.WebhookEventSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.SearchServiceApplication",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.config.ElasticSearchConfig",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.config.ElasticSearchIndexProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.config.KafkaConfig",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.config.WebClientConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.model.BlogSearchResult",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.util.List",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.time.LocalDate"
        ]
      },
      {
        "name": "getCreatedDate",
        "parameterTypes": []
      },
      {
        "name": "getId",
        "parameterTypes": []
      },
      {
        "name": "getMediumImage",
        "parameterTypes": []
      },
      {
        "name": "getShortDescription",
        "parameterTypes": []
      },
      {
        "name": "getSmallImage",
        "parameterTypes": []
      },
      {
        "name": "getTags",
        "parameterTypes": []
      },
      {
        "name": "getThumbnailImage",
        "parameterTypes": []
      },
      {
        "name": "getTitle",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.model.IndexBlogRequest",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.util.List",
          "java.util.List",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.time.LocalDate",
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.model.IndexSiteRequest",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.model.SiteSearchResult",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.util.List"
        ]
      },
      {
        "name": "getHits",
        "parameterTypes": []
      },
      {
        "name": "getType",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.model.SiteSearchResult$Hit",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "getImageUrl",
        "parameterTypes": []
      },
      {
        "name": "getLink",
        "parameterTypes": []
      },
      {
        "name": "getName",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.repository.BlogIndexRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "deleteBlogs",
        "parameterTypes": [
          "java.util.Collection"
        ]
      },
      {
        "name": "indexBlogs",
        "parameterTypes": [
          "java.util.Collection"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.repository.BlogSearchRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.repository.SiteIndexRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "indexSites",
        "parameterTypes": [
          "java.util.Collection"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.repository.SiteSearchRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.usecase.IndexBlogUseCase",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.core.repository.BlogIndexRepository"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "indexBlogs",
        "parameterTypes": [
          "java.util.Collection"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.usecase.IndexSiteUseCase",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.core.repository.SiteIndexRepository"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "indexSites",
        "parameterTypes": [
          "java.util.Collection"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.usecase.SearchBlogsUseCase",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.core.repository.BlogSearchRepository"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "getAll",
        "parameterTypes": [
          "kotlin.coroutines.Continuation"
        ]
      },
      {
        "name": "search",
        "parameterTypes": [
          "java.lang.String",
          "kotlin.coroutines.Continuation"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.core.usecase.SearchSiteUseCase",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.core.repository.SiteSearchRepository"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "search",
        "parameterTypes": [
          "java.lang.String",
          "kotlin.coroutines.Continuation"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.cms.CmsProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.cms.CmsRestApi",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.web.reactive.function.client.WebClient",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.cms.ICmsRestApi",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.AbstractIndexConfig",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocument",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.util.List",
          "java.util.List",
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.time.LocalDate"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocumentIndexConfig",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.elasticsearch.client.RestHighLevelClient",
          "com.simonjamesrowe.searchservice.config.ElasticSearchIndexProperties"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocumentRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocument_Accessor_6lo4ia",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocument"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocument_Accessor_6zh3bb",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocument"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocument_Instantiator_6lo4ia",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocument_Instantiator_6zh3bb",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogRepository",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.blog.BlogDocumentRepository"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.site.SiteDocument",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.site.SiteDocumentIndexConfig",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.elasticsearch.client.RestHighLevelClient",
          "com.simonjamesrowe.searchservice.config.ElasticSearchIndexProperties"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.site.SiteDocumentRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.site.SiteDocument_Accessor_mmbrn",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.site.SiteDocument"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.site.SiteDocument_Accessor_ud0kpz",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.site.SiteDocument"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.site.SiteSearchRepository",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.elasticsearch.client.RestHighLevelClient",
          "com.simonjamesrowe.searchservice.config.ElasticSearchIndexProperties",
          "com.simonjamesrowe.searchservice.dataproviders.elasticsearch.site.SiteDocumentRepository"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.entrypoints.kafka.IKafkaEventConsumer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.entrypoints.kafka.KafkaEventConsumer",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "consumeEvents",
        "parameterTypes": [
          "java.util.List",
          "java.util.List",
          "java.util.Map"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.core.usecase.IndexBlogUseCase",
          "com.simonjamesrowe.searchservice.core.usecase.IndexSiteUseCase",
          "com.fasterxml.jackson.databind.ObjectMapper",
          "com.simonjamesrowe.searchservice.dataproviders.cms.ICmsRestApi",
          "brave.Tracer"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.entrypoints.restcontroller.BlogController",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "getAll",
        "parameterTypes": [
          "kotlin.coroutines.Continuation"
        ]
      },
      {
        "name": "search",
        "parameterTypes": [
          "java.lang.String",
          "kotlin.coroutines.Continuation"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.core.usecase.SearchBlogsUseCase"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.entrypoints.restcontroller.SiteController",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "siteSearch",
        "parameterTypes": [
          "java.lang.String",
          "kotlin.coroutines.Continuation"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.core.usecase.SearchSiteUseCase"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.entrypoints.scheduled.CmsSynchronization",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.simonjamesrowe.searchservice.dataproviders.cms.ICmsRestApi",
          "com.simonjamesrowe.searchservice.core.usecase.IndexBlogUseCase",
          "com.simonjamesrowe.searchservice.core.usecase.IndexSiteUseCase",
          "org.springframework.core.env.Environment",
          "brave.Tracer"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "syncBlogDocuments",
        "parameterTypes": []
      },
      {
        "name": "syncSiteDocuments",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.entrypoints.scheduled.CmsSynchronization$Companion"
  },
  {
    "name": "com.simonjamesrowe.searchservice.entrypoints.scheduled.ICmsSynchronization",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.simonjamesrowe.searchservice.mapper.BlogMapper",
    "queriedMethods": [
      {
        "name": "toBlogIndexRequest",
        "parameterTypes": [
          "com.simonjamesrowe.model.cms.dto.BlogResponseDTO"
        ]
      },
      {
        "name": "toSiteIndexRequest",
        "parameterTypes": [
          "com.simonjamesrowe.model.cms.dto.BlogResponseDTO"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.mapper.JobMapper",
    "queriedMethods": [
      {
        "name": "toIndexSiteRequest",
        "parameterTypes": [
          "com.simonjamesrowe.model.cms.dto.JobResponseDTO"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.mapper.SkillsGroupMapper",
    "queriedMethods": [
      {
        "name": "toSiteIndexRequests",
        "parameterTypes": [
          "com.simonjamesrowe.model.cms.dto.SkillsGroupResponseDTO"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.test.entrypoints.kafka.KafkaEventConsumerTest$consuming webhook skill events will site$1",
    "methods": [
      {
        "name": "invokeSuspend",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.test.entrypoints.restcontroller.BlogControllerTest",
    "methods": [
      {
        "name": "get all should return expected results",
        "parameterTypes": []
      },
      {
        "name": "search should return expected results",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.test.entrypoints.restcontroller.SiteControllerTest",
    "methods": [
      {
        "name": "search results should be correct",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.test.entrypoints.scheduled.CmsSynchronizationTest$should index blog documents$1",
    "methods": [
      {
        "name": "invokeSuspend",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.test.entrypoints.scheduled.CmsSynchronizationTest$should index site documents$1",
    "methods": [
      {
        "name": "invokeSuspend",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.test.usecase.SearchBlogsUseCaseTest$should return all blogs$1",
    "methods": [
      {
        "name": "invokeSuspend",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.test.usecase.SearchBlogsUseCaseTest$should search for blogs with query$1",
    "methods": [
      {
        "name": "invokeSuspend",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "com.simonjamesrowe.searchservice.test.usecase.SearchSiteUseCaseTest$should return site search results$1",
    "methods": [
      {
        "name": "invokeSuspend",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.AESCipher$General",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.ARCFOURCipher",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.ChaCha20Cipher$ChaCha20Poly1305",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.DESCipher",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.DESedeCipher",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.GaloisCounterMode$AESGCM",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.management.GarbageCollectionNotificationInfo"
  },
  {
    "name": "com.sun.management.GarbageCollectorMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.sun.management.GcInfo",
    "queryAllPublicMethods": true,
    "fields": [
      {
        "name": "builder"
      },
      {
        "name": "extAttributes"
      }
    ]
  },
  {
    "name": "com.sun.management.HotSpotDiagnosticMXBean",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "getVMOption",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "com.sun.management.OperatingSystemMXBean",
    "queriedMethods": [
      {
        "name": "getCpuLoad",
        "parameterTypes": []
      },
      {
        "name": "getProcessCpuLoad",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.management.ThreadMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.sun.management.UnixOperatingSystemMXBean",
    "queryAllPublicMethods": true,
    "queriedMethods": [
      {
        "name": "getMaxFileDescriptorCount",
        "parameterTypes": []
      },
      {
        "name": "getOpenFileDescriptorCount",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.management.VMOption",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "getValue",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.management.internal.GarbageCollectorExtImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "com.sun.management.internal.HotSpotDiagnostic",
    "queryAllPublicConstructors": true
  },
  {
    "name": "com.sun.management.internal.HotSpotThreadImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "com.sun.management.internal.OperatingSystemImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "double",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.micrometer.core.instrument.Clock",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micrometer.core.instrument.Clock$1",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "monotonicTime",
        "parameterTypes": []
      },
      {
        "name": "wallTime",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.Counter"
  },
  {
    "name": "io.micrometer.core.instrument.DistributionSummary"
  },
  {
    "name": "io.micrometer.core.instrument.FunctionCounter"
  },
  {
    "name": "io.micrometer.core.instrument.FunctionTimer"
  },
  {
    "name": "io.micrometer.core.instrument.Gauge"
  },
  {
    "name": "io.micrometer.core.instrument.LongTaskTimer"
  },
  {
    "name": "io.micrometer.core.instrument.Meter"
  },
  {
    "name": "io.micrometer.core.instrument.Meter$Id"
  },
  {
    "name": "io.micrometer.core.instrument.Meter$Type"
  },
  {
    "name": "io.micrometer.core.instrument.MeterRegistry",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "close",
        "parameterTypes": []
      }
    ],
    "queriedMethods": [
      {
        "name": "clear",
        "parameterTypes": []
      },
      {
        "name": "config",
        "parameterTypes": []
      },
      {
        "name": "counter",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Iterable"
        ]
      },
      {
        "name": "counter",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String[]"
        ]
      },
      {
        "name": "find",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "forEachMeter",
        "parameterTypes": [
          "java.util.function.Consumer"
        ]
      },
      {
        "name": "gauge",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Iterable",
          "java.lang.Number"
        ]
      },
      {
        "name": "gauge",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Iterable",
          "java.lang.Object",
          "java.util.function.ToDoubleFunction"
        ]
      },
      {
        "name": "gauge",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Number"
        ]
      },
      {
        "name": "gauge",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Object",
          "java.util.function.ToDoubleFunction"
        ]
      },
      {
        "name": "gaugeCollectionSize",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Iterable",
          "java.util.Collection"
        ]
      },
      {
        "name": "gaugeMapSize",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Iterable",
          "java.util.Map"
        ]
      },
      {
        "name": "get",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getMeters",
        "parameterTypes": []
      },
      {
        "name": "isClosed",
        "parameterTypes": []
      },
      {
        "name": "more",
        "parameterTypes": []
      },
      {
        "name": "remove",
        "parameterTypes": [
          "io.micrometer.core.instrument.Meter$Id"
        ]
      },
      {
        "name": "remove",
        "parameterTypes": [
          "io.micrometer.core.instrument.Meter"
        ]
      },
      {
        "name": "removeByPreFilterId",
        "parameterTypes": [
          "io.micrometer.core.instrument.Meter$Id"
        ]
      },
      {
        "name": "summary",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Iterable"
        ]
      },
      {
        "name": "summary",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String[]"
        ]
      },
      {
        "name": "timer",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Iterable"
        ]
      },
      {
        "name": "timer",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String[]"
        ]
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.MeterRegistry$Config"
  },
  {
    "name": "io.micrometer.core.instrument.MeterRegistry$More"
  },
  {
    "name": "io.micrometer.core.instrument.Tag"
  },
  {
    "name": "io.micrometer.core.instrument.Tags"
  },
  {
    "name": "io.micrometer.core.instrument.TimeGauge"
  },
  {
    "name": "io.micrometer.core.instrument.Timer"
  },
  {
    "name": "io.micrometer.core.instrument.Timer$Builder"
  },
  {
    "name": "io.micrometer.core.instrument.binder.MeterBinder",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.binder.jvm.JvmGcMetrics",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      },
      {
        "name": "close",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.binder.jvm.JvmHeapPressureMetrics",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      },
      {
        "name": "close",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.binder.logging.LogbackMetrics",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      },
      {
        "name": "close",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.binder.system.FileDescriptorMetrics",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.binder.system.ProcessorMetrics",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.binder.system.UptimeMetrics",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.config.MeterFilter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micrometer.core.instrument.config.MeterFilter$9",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "accept",
        "parameterTypes": [
          "io.micrometer.core.instrument.Meter$Id"
        ]
      },
      {
        "name": "configure",
        "parameterTypes": [
          "io.micrometer.core.instrument.Meter$Id",
          "io.micrometer.core.instrument.distribution.DistributionStatisticConfig"
        ]
      }
    ]
  },
  {
    "name": "io.micrometer.core.instrument.config.MeterFilterReply"
  },
  {
    "name": "io.micrometer.core.instrument.config.MeterRegistryConfig",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micrometer.core.instrument.config.NamingConvention"
  },
  {
    "name": "io.micrometer.core.instrument.config.validate.Validated"
  },
  {
    "name": "io.micrometer.core.instrument.config.validate.ValidationException"
  },
  {
    "name": "io.micrometer.core.instrument.distribution.DistributionStatisticConfig"
  },
  {
    "name": "io.micrometer.core.instrument.distribution.TimeWindowSum"
  },
  {
    "name": "io.micrometer.core.instrument.distribution.pause.PauseDetector"
  },
  {
    "name": "io.micrometer.core.instrument.search.RequiredSearch"
  },
  {
    "name": "io.micrometer.core.instrument.search.Search"
  },
  {
    "name": "io.micrometer.core.instrument.simple.CountingMode"
  },
  {
    "name": "io.micrometer.core.instrument.simple.SimpleConfig",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micrometer.core.instrument.simple.SimpleMeterRegistry",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.micrometer.core.lang.NonNullApi",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.micrometer.core.lang.NonNullFields",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.micrometer.core.lang.Nullable",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.netty.buffer.AbstractByteBufAllocator",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.netty.buffer.AbstractReferenceCountedByteBuf",
    "fields": [
      {
        "name": "refCnt"
      }
    ]
  },
  {
    "name": "io.netty.buffer.ByteBuf"
  },
  {
    "name": "io.netty.channel.ChannelHandlerAdapter",
    "queriedMethods": [
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelInboundHandlerAdapter",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelInitializer",
    "queriedMethods": [
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelOutboundHandlerAdapter",
    "queriedMethods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.CombinedChannelDuplexHandler",
    "queriedMethods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelPipeline$HeadContext",
    "queriedMethods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelPipeline$TailContext",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultFileRegion"
  },
  {
    "name": "io.netty.channel.embedded.EmbeddedChannel$2"
  },
  {
    "name": "io.netty.channel.epoll.Epoll"
  },
  {
    "name": "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket"
  },
  {
    "name": "io.netty.channel.unix.PeerCredentials"
  },
  {
    "name": "io.netty.handler.codec.ByteToMessageDecoder",
    "queriedMethods": [
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.MessageToMessageDecoder",
    "queriedMethods": [
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.MessageToMessageEncoder",
    "queriedMethods": [
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.compression.JdkZlibDecoder"
  },
  {
    "name": "io.netty.handler.codec.dns.DatagramDnsQueryEncoder"
  },
  {
    "name": "io.netty.handler.codec.http.HttpClientCodec"
  },
  {
    "name": "io.netty.handler.codec.http.HttpContentDecoder",
    "queriedMethods": [
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.http.HttpContentDecompressor"
  },
  {
    "name": "io.netty.resolver.dns.DnsNameResolver$1"
  },
  {
    "name": "io.netty.resolver.dns.DnsNameResolver$3"
  },
  {
    "name": "io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.util.AbstractReferenceCounted",
    "fields": [
      {
        "name": "refCnt"
      }
    ]
  },
  {
    "name": "io.netty.util.ReferenceCountUtil",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.netty.util.internal.NativeLibraryUtil",
    "methods": [
      {
        "name": "loadLibrary",
        "parameterTypes": [
          "java.lang.String",
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "java.beans.PropertyVetoException"
  },
  {
    "name": "java.io.BufferedWriter"
  },
  {
    "name": "java.io.Closeable",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.io.DataInput"
  },
  {
    "name": "java.io.DataOutput"
  },
  {
    "name": "java.io.File"
  },
  {
    "name": "java.io.FileDescriptor"
  },
  {
    "name": "java.io.FilePermission"
  },
  {
    "name": "java.io.IOException"
  },
  {
    "name": "java.io.InputStream"
  },
  {
    "name": "java.io.ObjectInputStream"
  },
  {
    "name": "java.io.ObjectOutputStream"
  },
  {
    "name": "java.io.ObjectStreamException"
  },
  {
    "name": "java.io.OutputStream"
  },
  {
    "name": "java.io.PrintStream"
  },
  {
    "name": "java.io.PrintWriter"
  },
  {
    "name": "java.io.Reader"
  },
  {
    "name": "java.io.Serializable",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.io.StreamCorruptedException"
  },
  {
    "name": "java.io.UnsupportedEncodingException"
  },
  {
    "name": "java.io.Writer"
  },
  {
    "name": "java.lang.$JaCoCo",
    "fields": [
      {
        "name": "data"
      }
    ]
  },
  {
    "name": "java.lang.AbstractStringBuilder"
  },
  {
    "name": "java.lang.AutoCloseable",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.Boolean",
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "fields": [
      {
        "name": "TYPE"
      }
    ]
  },
  {
    "name": "java.lang.Byte",
    "fields": [
      {
        "name": "TYPE"
      }
    ]
  },
  {
    "name": "java.lang.CharSequence",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.Character",
    "fields": [
      {
        "name": "TYPE"
      }
    ]
  },
  {
    "name": "java.lang.Class",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "getModule",
        "parameterTypes": []
      },
      {
        "name": "getRecordComponents",
        "parameterTypes": []
      },
      {
        "name": "isRecord",
        "parameterTypes": []
      },
      {
        "name": "isSealed",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.ClassLoader",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.lang.ClassNotFoundException"
  },
  {
    "name": "java.lang.CloneNotSupportedException"
  },
  {
    "name": "java.lang.Cloneable",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.Comparable",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.Deprecated",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "forRemoval",
        "parameterTypes": []
      },
      {
        "name": "since",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.Double",
    "fields": [
      {
        "name": "TYPE"
      }
    ]
  },
  {
    "name": "java.lang.Enum",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.Enum$EnumDesc"
  },
  {
    "name": "java.lang.Exception"
  },
  {
    "name": "java.lang.Float",
    "fields": [
      {
        "name": "TYPE"
      }
    ]
  },
  {
    "name": "java.lang.FunctionalInterface"
  },
  {
    "name": "java.lang.IllegalArgumentException"
  },
  {
    "name": "java.lang.IllegalStateException"
  },
  {
    "name": "java.lang.Integer",
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "fields": [
      {
        "name": "TYPE"
      }
    ]
  },
  {
    "name": "java.lang.InterruptedException"
  },
  {
    "name": "java.lang.Iterable",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.Long",
    "allDeclaredFields": true,
    "fields": [
      {
        "name": "TYPE"
      }
    ]
  },
  {
    "name": "java.lang.Module",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.lang.Number",
    "allDeclaredFields": true
  },
  {
    "name": "java.lang.Object",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.Runnable"
  },
  {
    "name": "java.lang.RuntimeException"
  },
  {
    "name": "java.lang.RuntimePermission"
  },
  {
    "name": "java.lang.SafeVarargs"
  },
  {
    "name": "java.lang.Short",
    "fields": [
      {
        "name": "TYPE"
      }
    ]
  },
  {
    "name": "java.lang.StackTraceElement",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.String",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "java.lang.StringBuffer"
  },
  {
    "name": "java.lang.StringBuilder"
  },
  {
    "name": "java.lang.Thread"
  },
  {
    "name": "java.lang.Thread$State"
  },
  {
    "name": "java.lang.ThreadGroup"
  },
  {
    "name": "java.lang.Throwable",
    "allDeclaredFields": true,
    "methods": [
      {
        "name": "getSuppressed",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.Void",
    "fields": [
      {
        "name": "TYPE"
      }
    ]
  },
  {
    "name": "java.lang.constant.ClassDesc"
  },
  {
    "name": "java.lang.constant.Constable",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.constant.ConstantDesc",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.instrument.Instrumentation",
    "methods": [
      {
        "name": "redefineModule",
        "parameterTypes": [
          "java.lang.Module",
          "java.util.Set",
          "java.util.Map",
          "java.util.Map",
          "java.util.Set",
          "java.util.Map"
        ]
      }
    ]
  },
  {
    "name": "java.lang.invoke.MethodHandles",
    "methods": [
      {
        "name": "lookup",
        "parameterTypes": []
      },
      {
        "name": "privateLookupIn",
        "parameterTypes": [
          "java.lang.Class",
          "java.lang.invoke.MethodHandles$Lookup"
        ]
      }
    ]
  },
  {
    "name": "java.lang.invoke.MethodHandles$Lookup",
    "methods": [
      {
        "name": "defineClass",
        "parameterTypes": [
          "byte[]"
        ]
      }
    ]
  },
  {
    "name": "java.lang.invoke.SerializedLambda"
  },
  {
    "name": "java.lang.invoke.TypeDescriptor$OfField",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.invoke.VarHandle",
    "methods": [
      {
        "name": "releaseFence",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.management.BufferPoolMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.ClassLoadingMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.CompilationMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.LockInfo",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.ManagementFactory",
    "methods": [
      {
        "name": "getPlatformMXBean",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "getRuntimeMXBean",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.management.ManagementPermission",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.lang.management.MemoryMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.MemoryManagerMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.MemoryPoolMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.MemoryUsage",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "from",
        "parameterTypes": [
          "javax.management.openmbean.CompositeData"
        ]
      }
    ]
  },
  {
    "name": "java.lang.management.MonitorInfo",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.OperatingSystemMXBean"
  },
  {
    "name": "java.lang.management.PlatformLoggingMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.RuntimeMXBean",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "getInputArguments",
        "parameterTypes": []
      },
      {
        "name": "getName",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.management.ThreadInfo",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.management.ThreadMXBean"
  },
  {
    "name": "java.lang.reflect.AnnotatedElement",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.reflect.Constructor"
  },
  {
    "name": "java.lang.reflect.Executable",
    "methods": [
      {
        "name": "getParameters",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.reflect.Field"
  },
  {
    "name": "java.lang.reflect.GenericDeclaration",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.reflect.Method"
  },
  {
    "name": "java.lang.reflect.Parameter",
    "methods": [
      {
        "name": "getName",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.reflect.ParameterizedType",
    "methods": [
      {
        "name": "getActualTypeArguments",
        "parameterTypes": []
      },
      {
        "name": "getOwnerType",
        "parameterTypes": []
      },
      {
        "name": "getRawType",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.reflect.Proxy",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.lang.reflect.Type",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.reflect.TypeVariable",
    "methods": [
      {
        "name": "getBounds",
        "parameterTypes": []
      },
      {
        "name": "getName",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.reflect.WildcardType",
    "methods": [
      {
        "name": "getLowerBounds",
        "parameterTypes": []
      },
      {
        "name": "getUpperBounds",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.math.BigDecimal"
  },
  {
    "name": "java.math.BigInteger"
  },
  {
    "name": "java.net.InetAddress"
  },
  {
    "name": "java.net.InetSocketAddress"
  },
  {
    "name": "java.net.NetPermission"
  },
  {
    "name": "java.net.SocketOption"
  },
  {
    "name": "java.net.SocketPermission"
  },
  {
    "name": "java.net.StandardSocketOptions",
    "fields": [
      {
        "name": "IP_MULTICAST_IF"
      },
      {
        "name": "IP_MULTICAST_LOOP"
      },
      {
        "name": "IP_MULTICAST_TTL"
      }
    ]
  },
  {
    "name": "java.net.URI"
  },
  {
    "name": "java.net.URL"
  },
  {
    "name": "java.net.URLPermission",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.nio.Bits",
    "queriedMethods": [
      {
        "name": "unaligned",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.nio.Buffer",
    "fields": [
      {
        "name": "address"
      }
    ]
  },
  {
    "name": "java.nio.ByteBuffer",
    "queriedMethods": [
      {
        "name": "alignedSlice",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "java.nio.DirectByteBuffer",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "long",
          "int"
        ]
      }
    ]
  },
  {
    "name": "java.nio.channels.FileChannel"
  },
  {
    "name": "java.nio.channels.NetworkChannel",
    "queriedMethods": [
      {
        "name": "getOption",
        "parameterTypes": [
          "java.net.SocketOption"
        ]
      },
      {
        "name": "setOption",
        "parameterTypes": [
          "java.net.SocketOption",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "java.nio.charset.CharacterCodingException"
  },
  {
    "name": "java.nio.charset.Charset"
  },
  {
    "name": "java.nio.charset.CharsetDecoder"
  },
  {
    "name": "java.nio.file.Path"
  },
  {
    "name": "java.security.AlgorithmParametersSpi"
  },
  {
    "name": "java.security.AllPermission"
  },
  {
    "name": "java.security.KeyStoreSpi"
  },
  {
    "name": "java.security.SecureClassLoader",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.security.SecureRandomParameters"
  },
  {
    "name": "java.security.SecurityPermission"
  },
  {
    "name": "java.sql.Date"
  },
  {
    "name": "java.sql.Timestamp"
  },
  {
    "name": "java.text.DateFormat"
  },
  {
    "name": "java.time.Clock",
    "queriedMethods": [
      {
        "name": "tickMillis",
        "parameterTypes": [
          "java.time.ZoneId"
        ]
      }
    ]
  },
  {
    "name": "java.time.Duration"
  },
  {
    "name": "java.time.Instant"
  },
  {
    "name": "java.time.LocalDate"
  },
  {
    "name": "java.time.LocalDateTime"
  },
  {
    "name": "java.time.ZoneId"
  },
  {
    "name": "java.time.ZonedDateTime"
  },
  {
    "name": "java.util.AbstractCollection",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "containsAll",
        "parameterTypes": [
          "java.util.Collection"
        ]
      },
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.util.AbstractList",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.util.ArrayList",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ],
    "queriedMethods": [
      {
        "name": "add",
        "parameterTypes": [
          "int",
          "java.lang.Object"
        ]
      },
      {
        "name": "add",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "addAll",
        "parameterTypes": [
          "int",
          "java.util.Collection"
        ]
      },
      {
        "name": "addAll",
        "parameterTypes": [
          "java.util.Collection"
        ]
      },
      {
        "name": "clear",
        "parameterTypes": []
      },
      {
        "name": "contains",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "equals",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "forEach",
        "parameterTypes": [
          "java.util.function.Consumer"
        ]
      },
      {
        "name": "get",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "hashCode",
        "parameterTypes": []
      },
      {
        "name": "indexOf",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "isEmpty",
        "parameterTypes": []
      },
      {
        "name": "iterator",
        "parameterTypes": []
      },
      {
        "name": "lastIndexOf",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "listIterator",
        "parameterTypes": []
      },
      {
        "name": "listIterator",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "remove",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "remove",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "removeAll",
        "parameterTypes": [
          "java.util.Collection"
        ]
      },
      {
        "name": "removeIf",
        "parameterTypes": [
          "java.util.function.Predicate"
        ]
      },
      {
        "name": "replaceAll",
        "parameterTypes": [
          "java.util.function.UnaryOperator"
        ]
      },
      {
        "name": "retainAll",
        "parameterTypes": [
          "java.util.Collection"
        ]
      },
      {
        "name": "set",
        "parameterTypes": [
          "int",
          "java.lang.Object"
        ]
      },
      {
        "name": "size",
        "parameterTypes": []
      },
      {
        "name": "sort",
        "parameterTypes": [
          "java.util.Comparator"
        ]
      },
      {
        "name": "spliterator",
        "parameterTypes": []
      },
      {
        "name": "subList",
        "parameterTypes": [
          "int",
          "int"
        ]
      },
      {
        "name": "toArray",
        "parameterTypes": []
      },
      {
        "name": "toArray",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      }
    ]
  },
  {
    "name": "java.util.Arrays",
    "allDeclaredClasses": true
  },
  {
    "name": "java.util.Arrays$ArrayList",
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "java.util.Collection",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.util.Collections",
    "allDeclaredClasses": true
  },
  {
    "name": "java.util.Collections$SingletonList",
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "java.util.Comparator"
  },
  {
    "name": "java.util.Date"
  },
  {
    "name": "java.util.Dictionary",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.util.Enumeration"
  },
  {
    "name": "java.util.EventListener",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.util.HashMap",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.util.Hashtable",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.util.Hashtable$Entry"
  },
  {
    "name": "java.util.InvalidPropertiesFormatException"
  },
  {
    "name": "java.util.Iterator"
  },
  {
    "name": "java.util.List",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "java.util.ListIterator"
  },
  {
    "name": "java.util.Locale"
  },
  {
    "name": "java.util.Map",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.util.Map$Entry"
  },
  {
    "name": "java.util.Optional"
  },
  {
    "name": "java.util.Properties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "clear",
        "parameterTypes": []
      },
      {
        "name": "clone",
        "parameterTypes": []
      },
      {
        "name": "compute",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.function.BiFunction"
        ]
      },
      {
        "name": "computeIfAbsent",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.function.Function"
        ]
      },
      {
        "name": "computeIfPresent",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.function.BiFunction"
        ]
      },
      {
        "name": "contains",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "containsKey",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "containsValue",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "elements",
        "parameterTypes": []
      },
      {
        "name": "entrySet",
        "parameterTypes": []
      },
      {
        "name": "equals",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "forEach",
        "parameterTypes": [
          "java.util.function.BiConsumer"
        ]
      },
      {
        "name": "get",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "getOrDefault",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "hashCode",
        "parameterTypes": []
      },
      {
        "name": "isEmpty",
        "parameterTypes": []
      },
      {
        "name": "keySet",
        "parameterTypes": []
      },
      {
        "name": "keys",
        "parameterTypes": []
      },
      {
        "name": "merge",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "java.util.function.BiFunction"
        ]
      },
      {
        "name": "put",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "putAll",
        "parameterTypes": [
          "java.util.Map"
        ]
      },
      {
        "name": "putIfAbsent",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "remove",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "remove",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "replace",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "replace",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "replaceAll",
        "parameterTypes": [
          "java.util.function.BiFunction"
        ]
      },
      {
        "name": "size",
        "parameterTypes": []
      },
      {
        "name": "toString",
        "parameterTypes": []
      },
      {
        "name": "values",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.util.Properties$LineReader"
  },
  {
    "name": "java.util.PropertyPermission",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.util.RandomAccess",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.util.ServiceLoader"
  },
  {
    "name": "java.util.Set"
  },
  {
    "name": "java.util.Spliterator"
  },
  {
    "name": "java.util.Spliterator$OfInt"
  },
  {
    "name": "java.util.TimeZone"
  },
  {
    "name": "java.util.UUID"
  },
  {
    "name": "java.util.concurrent.BlockingQueue"
  },
  {
    "name": "java.util.concurrent.Callable"
  },
  {
    "name": "java.util.concurrent.CompletableFuture"
  },
  {
    "name": "java.util.concurrent.CountDownLatch"
  },
  {
    "name": "java.util.concurrent.Executor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.util.concurrent.ExecutorService"
  },
  {
    "name": "java.util.concurrent.Flow$Publisher"
  },
  {
    "name": "java.util.concurrent.Future"
  },
  {
    "name": "java.util.concurrent.RejectedExecutionHandler"
  },
  {
    "name": "java.util.concurrent.ScheduledExecutorService"
  },
  {
    "name": "java.util.concurrent.ScheduledFuture"
  },
  {
    "name": "java.util.concurrent.ScheduledThreadPoolExecutor"
  },
  {
    "name": "java.util.concurrent.ThreadFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.util.concurrent.ThreadPoolExecutor"
  },
  {
    "name": "java.util.concurrent.TimeUnit"
  },
  {
    "name": "java.util.concurrent.atomic.AtomicBoolean"
  },
  {
    "name": "java.util.concurrent.atomic.AtomicLong"
  },
  {
    "name": "java.util.concurrent.atomic.AtomicReference"
  },
  {
    "name": "java.util.function.BiConsumer"
  },
  {
    "name": "java.util.function.BiFunction"
  },
  {
    "name": "java.util.function.BiPredicate"
  },
  {
    "name": "java.util.function.Consumer"
  },
  {
    "name": "java.util.function.Function"
  },
  {
    "name": "java.util.function.IntFunction"
  },
  {
    "name": "java.util.function.Predicate"
  },
  {
    "name": "java.util.function.Supplier",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.util.function.ToDoubleFunction"
  },
  {
    "name": "java.util.function.ToLongFunction"
  },
  {
    "name": "java.util.function.UnaryOperator"
  },
  {
    "name": "java.util.logging.LogManager",
    "methods": [
      {
        "name": "getLoggingMXBean",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.util.logging.LoggingMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.util.regex.Pattern"
  },
  {
    "name": "java.util.stream.Collector"
  },
  {
    "name": "java.util.stream.IntStream"
  },
  {
    "name": "java.util.stream.Stream"
  },
  {
    "name": "java.util.zip.Adler32",
    "methods": [
      {
        "name": "update",
        "parameterTypes": [
          "java.nio.ByteBuffer"
        ]
      }
    ]
  },
  {
    "name": "java.util.zip.CRC32",
    "methods": [
      {
        "name": "update",
        "parameterTypes": [
          "java.nio.ByteBuffer"
        ]
      }
    ]
  },
  {
    "name": "java.util.zip.CRC32C",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "javax.annotation.Nonnull",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "when",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "javax.annotation.PostConstruct",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "javax.annotation.meta.TypeQualifier",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "applicableTo",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "javax.annotation.meta.TypeQualifierDefault",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "javax.management.MBeanOperationInfo",
    "queryAllPublicMethods": true
  },
  {
    "name": "javax.management.MBeanServerBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "javax.management.Notification"
  },
  {
    "name": "javax.management.NotificationEmitter"
  },
  {
    "name": "javax.management.NotificationListener"
  },
  {
    "name": "javax.management.ObjectName"
  },
  {
    "name": "javax.management.openmbean.CompositeData"
  },
  {
    "name": "javax.management.openmbean.OpenMBeanOperationInfoSupport"
  },
  {
    "name": "javax.management.openmbean.TabularData"
  },
  {
    "name": "javax.net.ssl.HostnameVerifier"
  },
  {
    "name": "javax.net.ssl.SSLContext"
  },
  {
    "name": "javax.security.auth.x500.X500Principal",
    "fields": [
      {
        "name": "thisX500Name"
      }
    ],
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "sun.security.x509.X500Name"
        ]
      }
    ]
  },
  {
    "name": "javax.xml.bind.Binder"
  },
  {
    "name": "jdk.internal.ValueBased"
  },
  {
    "name": "jdk.internal.loader.BuiltinClassLoader",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "jdk.internal.loader.ClassLoaders$AppClassLoader",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "jdk.internal.misc.Unsafe",
    "methods": [
      {
        "name": "getUnsafe",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "jdk.internal.reflect.DelegatingMethodAccessorImpl"
  },
  {
    "name": "jdk.internal.reflect.NativeMethodAccessorImpl"
  },
  {
    "name": "jdk.internal.vm.annotation.ForceInline"
  },
  {
    "name": "jdk.internal.vm.annotation.IntrinsicCandidate"
  },
  {
    "name": "jdk.management.jfr.ConfigurationInfo",
    "queryAllPublicMethods": true
  },
  {
    "name": "jdk.management.jfr.EventTypeInfo",
    "queryAllPublicMethods": true
  },
  {
    "name": "jdk.management.jfr.FlightRecorderMXBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "jdk.management.jfr.FlightRecorderMXBeanImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "jdk.management.jfr.RecordingInfo",
    "queryAllPublicMethods": true
  },
  {
    "name": "jdk.management.jfr.SettingDescriptorInfo",
    "queryAllPublicMethods": true
  },
  {
    "name": "kotlin.Deprecated"
  },
  {
    "name": "kotlin.KotlinVersion",
    "fields": [
      {
        "name": "CURRENT"
      }
    ]
  },
  {
    "name": "kotlin.Metadata",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "bv",
        "parameterTypes": []
      },
      {
        "name": "d1",
        "parameterTypes": []
      },
      {
        "name": "d2",
        "parameterTypes": []
      },
      {
        "name": "k",
        "parameterTypes": []
      },
      {
        "name": "mv",
        "parameterTypes": []
      },
      {
        "name": "pn",
        "parameterTypes": []
      },
      {
        "name": "xi",
        "parameterTypes": []
      },
      {
        "name": "xs",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlin.Unit"
  },
  {
    "name": "kotlin.annotation.AnnotationTarget"
  },
  {
    "name": "kotlin.annotation.MustBeDocumented",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "kotlin.annotation.Retention",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlin.annotation.Target",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "allowedTargets",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlin.coroutines.Continuation"
  },
  {
    "name": "kotlin.coroutines.jvm.internal.DebugMetadata",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "kotlin.jvm.internal.DefaultConstructorMarker"
  },
  {
    "name": "kotlin.reflect.full.KClasses"
  },
  {
    "name": "kotlin.reflect.jvm.internal.ReflectionFactoryImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter",
    "allPublicFields": true
  },
  {
    "name": "kotlinx.coroutines.reactor.MonoKt"
  },
  {
    "name": "org.aopalliance.aop.Advice"
  },
  {
    "name": "org.aopalliance.intercept.MethodInvocation"
  },
  {
    "name": "org.apache.commons.logging.Log"
  },
  {
    "name": "org.apache.http.ConnectionReuseStrategy"
  },
  {
    "name": "org.apache.http.Header"
  },
  {
    "name": "org.apache.http.HttpEntity"
  },
  {
    "name": "org.apache.http.HttpException"
  },
  {
    "name": "org.apache.http.HttpHost"
  },
  {
    "name": "org.apache.http.HttpRequest"
  },
  {
    "name": "org.apache.http.HttpRequestInterceptor"
  },
  {
    "name": "org.apache.http.HttpResponseInterceptor"
  },
  {
    "name": "org.apache.http.client.AuthenticationStrategy"
  },
  {
    "name": "org.apache.http.client.BackoffManager"
  },
  {
    "name": "org.apache.http.client.ConnectionBackoffStrategy"
  },
  {
    "name": "org.apache.http.client.CookieStore"
  },
  {
    "name": "org.apache.http.client.CredentialsProvider"
  },
  {
    "name": "org.apache.http.client.HttpClient"
  },
  {
    "name": "org.apache.http.client.HttpRequestRetryHandler"
  },
  {
    "name": "org.apache.http.client.RedirectStrategy"
  },
  {
    "name": "org.apache.http.client.ServiceUnavailableRetryStrategy"
  },
  {
    "name": "org.apache.http.client.UserTokenHandler"
  },
  {
    "name": "org.apache.http.client.config.RequestConfig"
  },
  {
    "name": "org.apache.http.client.config.RequestConfig$Builder"
  },
  {
    "name": "org.apache.http.config.ConnectionConfig"
  },
  {
    "name": "org.apache.http.config.Lookup"
  },
  {
    "name": "org.apache.http.config.RegistryBuilder"
  },
  {
    "name": "org.apache.http.config.SocketConfig"
  },
  {
    "name": "org.apache.http.conn.ConnectionKeepAliveStrategy"
  },
  {
    "name": "org.apache.http.conn.DnsResolver"
  },
  {
    "name": "org.apache.http.conn.HttpClientConnectionManager"
  },
  {
    "name": "org.apache.http.conn.SchemePortResolver"
  },
  {
    "name": "org.apache.http.conn.routing.HttpRoutePlanner"
  },
  {
    "name": "org.apache.http.conn.socket.LayeredConnectionSocketFactory"
  },
  {
    "name": "org.apache.http.conn.ssl.NoopHostnameVerifier"
  },
  {
    "name": "org.apache.http.conn.ssl.X509HostnameVerifier",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.apache.http.conn.util.PublicSuffixMatcher"
  },
  {
    "name": "org.apache.http.impl.client.CloseableHttpClient"
  },
  {
    "name": "org.apache.http.impl.client.HttpClientBuilder",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.apache.http.impl.execchain.ClientExecChain"
  },
  {
    "name": "org.apache.http.impl.nio.client.CloseableHttpAsyncClient"
  },
  {
    "name": "org.apache.http.impl.nio.client.CloseableHttpAsyncClientBase$1"
  },
  {
    "name": "org.apache.http.impl.nio.client.HttpAsyncClientBuilder"
  },
  {
    "name": "org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager"
  },
  {
    "name": "org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor"
  },
  {
    "name": "org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor"
  },
  {
    "name": "org.apache.http.protocol.HttpContext"
  },
  {
    "name": "org.apache.http.protocol.HttpProcessor"
  },
  {
    "name": "org.apache.http.protocol.HttpRequestExecutor"
  },
  {
    "name": "org.apache.http.util.VersionInfo"
  },
  {
    "name": "org.apache.kafka.clients.admin.AdminClient"
  },
  {
    "name": "org.apache.kafka.clients.admin.DescribeTopicsResult"
  },
  {
    "name": "org.apache.kafka.clients.admin.NewTopic",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "equals",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hashCode",
        "parameterTypes": []
      },
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.kafka.clients.admin.TopicDescription"
  },
  {
    "name": "org.apache.kafka.clients.consumer.Consumer",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "assignment",
        "parameterTypes": []
      },
      {
        "name": "close",
        "parameterTypes": []
      },
      {
        "name": "metrics",
        "parameterTypes": []
      },
      {
        "name": "paused",
        "parameterTypes": []
      },
      {
        "name": "poll",
        "parameterTypes": [
          "java.time.Duration"
        ]
      },
      {
        "name": "position",
        "parameterTypes": [
          "org.apache.kafka.common.TopicPartition"
        ]
      },
      {
        "name": "subscribe",
        "parameterTypes": [
          "java.util.Collection",
          "org.apache.kafka.clients.consumer.ConsumerRebalanceListener"
        ]
      },
      {
        "name": "unsubscribe",
        "parameterTypes": []
      },
      {
        "name": "wakeup",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.kafka.clients.consumer.ConsumerGroupMetadata"
  },
  {
    "name": "org.apache.kafka.clients.consumer.ConsumerRecord"
  },
  {
    "name": "org.apache.kafka.clients.consumer.ConsumerRecords"
  },
  {
    "name": "org.apache.kafka.clients.consumer.CooperativeStickyAssignor",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.kafka.clients.consumer.RangeAssignor",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.kafka.clients.producer.Callback"
  },
  {
    "name": "org.apache.kafka.clients.producer.Producer"
  },
  {
    "name": "org.apache.kafka.clients.producer.ProducerRecord"
  },
  {
    "name": "org.apache.kafka.clients.producer.RecordMetadata"
  },
  {
    "name": "org.apache.kafka.clients.producer.internals.DefaultPartitioner",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.KafkaFuture"
  },
  {
    "name": "org.apache.kafka.common.TopicPartition"
  },
  {
    "name": "org.apache.kafka.common.header.Headers"
  },
  {
    "name": "org.apache.kafka.common.internals.KafkaFutureImpl"
  },
  {
    "name": "org.apache.kafka.common.message.CreateTopicsRequestData$CreatableTopic"
  },
  {
    "name": "org.apache.kafka.common.serialization.Deserializer"
  },
  {
    "name": "org.apache.kafka.common.serialization.Serializer"
  },
  {
    "name": "org.apache.kafka.common.serialization.StringDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.serialization.StringSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.kafka.common.utils.AppInfoParser$AppInfo",
    "queryAllPublicConstructors": true
  },
  {
    "name": "org.apache.kafka.common.utils.AppInfoParser$AppInfoMBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.apache.kafka.streams.KafkaClientSupplier"
  },
  {
    "name": "org.apache.kafka.streams.KafkaStreams"
  },
  {
    "name": "org.apache.kafka.streams.Topology"
  },
  {
    "name": "org.apache.kafka.streams.kstream.ForeachAction"
  },
  {
    "name": "org.apache.kafka.streams.kstream.KeyValueMapper"
  },
  {
    "name": "org.apache.kafka.streams.kstream.Predicate"
  },
  {
    "name": "org.apache.kafka.streams.kstream.Transformer"
  },
  {
    "name": "org.apache.kafka.streams.kstream.TransformerSupplier"
  },
  {
    "name": "org.apache.kafka.streams.kstream.ValueMapper"
  },
  {
    "name": "org.apache.kafka.streams.kstream.ValueMapperWithKey"
  },
  {
    "name": "org.apache.kafka.streams.kstream.ValueTransformer"
  },
  {
    "name": "org.apache.kafka.streams.kstream.ValueTransformerSupplier"
  },
  {
    "name": "org.apache.kafka.streams.kstream.ValueTransformerWithKey"
  },
  {
    "name": "org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier"
  },
  {
    "name": "org.apache.kafka.streams.processor.Processor"
  },
  {
    "name": "org.apache.kafka.streams.processor.ProcessorContext"
  },
  {
    "name": "org.apache.kafka.streams.processor.ProcessorSupplier"
  },
  {
    "name": "org.apache.logging.log4j.Logger"
  },
  {
    "name": "org.apache.logging.log4j.message.DefaultFlowMessageFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.logging.log4j.message.ReusableMessageFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.logging.log4j.spi.ExtendedLogger"
  },
  {
    "name": "org.apache.logging.slf4j.SLF4JLoggerContextFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.apache.logging.slf4j.SLF4JProvider"
  },
  {
    "name": "org.aspectj.lang.annotation.Around",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "argNames",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.aspectj.lang.annotation.Aspect",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.aspectj.lang.annotation.Pointcut",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.aspectj.weaver.reflect.Java15AnnotationFinder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.aspectj.weaver.World"
        ]
      }
    ]
  },
  {
    "name": "org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.aspectj.weaver.tools.Jdk14TraceFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.elasticsearch.ElasticsearchException"
  },
  {
    "name": "org.elasticsearch.ElasticsearchStatusException"
  },
  {
    "name": "org.elasticsearch.Version",
    "allPublicFields": true
  },
  {
    "name": "org.elasticsearch.action.ActionListener"
  },
  {
    "name": "org.elasticsearch.action.ActionRequest",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse"
  },
  {
    "name": "org.elasticsearch.action.admin.cluster.storedscripts.DeleteStoredScriptRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.cluster.storedscripts.GetStoredScriptRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.cluster.storedscripts.GetStoredScriptResponse"
  },
  {
    "name": "org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.alias.get.GetAliasesRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.close.CloseIndexRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.create.CreateIndexRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.flush.FlushRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.get.GetIndexRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.open.OpenIndexRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.refresh.RefreshRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest"
  },
  {
    "name": "org.elasticsearch.action.admin.indices.template.delete.DeleteIndexTemplateRequest"
  },
  {
    "name": "org.elasticsearch.action.bulk.BulkItemResponse"
  },
  {
    "name": "org.elasticsearch.action.bulk.BulkRequest",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.action.bulk.BulkResponse"
  },
  {
    "name": "org.elasticsearch.action.delete.DeleteRequest",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.action.delete.DeleteResponse"
  },
  {
    "name": "org.elasticsearch.action.explain.ExplainRequest"
  },
  {
    "name": "org.elasticsearch.action.explain.ExplainResponse"
  },
  {
    "name": "org.elasticsearch.action.fieldcaps.FieldCapabilitiesRequest"
  },
  {
    "name": "org.elasticsearch.action.fieldcaps.FieldCapabilitiesResponse"
  },
  {
    "name": "org.elasticsearch.action.get.GetRequest"
  },
  {
    "name": "org.elasticsearch.action.get.GetResponse"
  },
  {
    "name": "org.elasticsearch.action.get.MultiGetRequest"
  },
  {
    "name": "org.elasticsearch.action.get.MultiGetResponse"
  },
  {
    "name": "org.elasticsearch.action.index.IndexRequest",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.action.index.IndexResponse"
  },
  {
    "name": "org.elasticsearch.action.main.MainResponse"
  },
  {
    "name": "org.elasticsearch.action.search.ClearScrollRequest"
  },
  {
    "name": "org.elasticsearch.action.search.ClearScrollResponse"
  },
  {
    "name": "org.elasticsearch.action.search.ClosePointInTimeRequest"
  },
  {
    "name": "org.elasticsearch.action.search.ClosePointInTimeResponse"
  },
  {
    "name": "org.elasticsearch.action.search.MultiSearchRequest"
  },
  {
    "name": "org.elasticsearch.action.search.MultiSearchResponse"
  },
  {
    "name": "org.elasticsearch.action.search.MultiSearchResponse$Item"
  },
  {
    "name": "org.elasticsearch.action.search.OpenPointInTimeRequest"
  },
  {
    "name": "org.elasticsearch.action.search.OpenPointInTimeResponse"
  },
  {
    "name": "org.elasticsearch.action.search.SearchRequest"
  },
  {
    "name": "org.elasticsearch.action.search.SearchResponse"
  },
  {
    "name": "org.elasticsearch.action.search.SearchScrollRequest"
  },
  {
    "name": "org.elasticsearch.action.support.IndicesOptions"
  },
  {
    "name": "org.elasticsearch.action.support.WriteRequest"
  },
  {
    "name": "org.elasticsearch.action.support.master.AcknowledgedResponse"
  },
  {
    "name": "org.elasticsearch.action.support.replication.ReplicatedWriteRequest",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.action.support.replication.ReplicationRequest",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.action.update.UpdateRequest"
  },
  {
    "name": "org.elasticsearch.action.update.UpdateResponse"
  },
  {
    "name": "org.elasticsearch.client.AsyncSearchClient"
  },
  {
    "name": "org.elasticsearch.client.Cancellable"
  },
  {
    "name": "org.elasticsearch.client.CcrClient"
  },
  {
    "name": "org.elasticsearch.client.ClusterClient"
  },
  {
    "name": "org.elasticsearch.client.EnrichClient"
  },
  {
    "name": "org.elasticsearch.client.EqlClient"
  },
  {
    "name": "org.elasticsearch.client.FeaturesClient"
  },
  {
    "name": "org.elasticsearch.client.GraphClient"
  },
  {
    "name": "org.elasticsearch.client.IndexLifecycleClient"
  },
  {
    "name": "org.elasticsearch.client.IndicesClient"
  },
  {
    "name": "org.elasticsearch.client.IngestClient"
  },
  {
    "name": "org.elasticsearch.client.LicenseClient"
  },
  {
    "name": "org.elasticsearch.client.MachineLearningClient"
  },
  {
    "name": "org.elasticsearch.client.MigrationClient"
  },
  {
    "name": "org.elasticsearch.client.NodeSelector"
  },
  {
    "name": "org.elasticsearch.client.Request"
  },
  {
    "name": "org.elasticsearch.client.RequestOptions"
  },
  {
    "name": "org.elasticsearch.client.Response"
  },
  {
    "name": "org.elasticsearch.client.ResponseException"
  },
  {
    "name": "org.elasticsearch.client.ResponseListener"
  },
  {
    "name": "org.elasticsearch.client.RestClient"
  },
  {
    "name": "org.elasticsearch.client.RestClient$FailureListener"
  },
  {
    "name": "org.elasticsearch.client.RestClientBuilder",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.elasticsearch.client.RestClientBuilder$HttpClientConfigCallback"
  },
  {
    "name": "org.elasticsearch.client.RestClientBuilder$RequestConfigCallback"
  },
  {
    "name": "org.elasticsearch.client.RestHighLevelClient",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.elasticsearch.client.RethrottleRequest"
  },
  {
    "name": "org.elasticsearch.client.RollupClient"
  },
  {
    "name": "org.elasticsearch.client.SearchableSnapshotsClient"
  },
  {
    "name": "org.elasticsearch.client.SecurityClient"
  },
  {
    "name": "org.elasticsearch.client.SnapshotClient"
  },
  {
    "name": "org.elasticsearch.client.TasksClient"
  },
  {
    "name": "org.elasticsearch.client.TextStructureClient"
  },
  {
    "name": "org.elasticsearch.client.TransformClient"
  },
  {
    "name": "org.elasticsearch.client.Validatable"
  },
  {
    "name": "org.elasticsearch.client.WatcherClient"
  },
  {
    "name": "org.elasticsearch.client.XPackClient"
  },
  {
    "name": "org.elasticsearch.client.core.CountRequest"
  },
  {
    "name": "org.elasticsearch.client.core.CountResponse"
  },
  {
    "name": "org.elasticsearch.client.core.GetSourceRequest"
  },
  {
    "name": "org.elasticsearch.client.core.GetSourceResponse"
  },
  {
    "name": "org.elasticsearch.client.core.MainRequest"
  },
  {
    "name": "org.elasticsearch.client.core.MainResponse"
  },
  {
    "name": "org.elasticsearch.client.core.MultiTermVectorsRequest"
  },
  {
    "name": "org.elasticsearch.client.core.MultiTermVectorsResponse"
  },
  {
    "name": "org.elasticsearch.client.core.TermVectorsRequest"
  },
  {
    "name": "org.elasticsearch.client.core.TermVectorsResponse"
  },
  {
    "name": "org.elasticsearch.client.indices.CreateIndexRequest"
  },
  {
    "name": "org.elasticsearch.client.indices.GetFieldMappingsRequest"
  },
  {
    "name": "org.elasticsearch.client.indices.GetIndexRequest"
  },
  {
    "name": "org.elasticsearch.client.indices.GetIndexTemplatesRequest"
  },
  {
    "name": "org.elasticsearch.client.indices.GetMappingsRequest"
  },
  {
    "name": "org.elasticsearch.client.indices.IndexTemplatesExistRequest"
  },
  {
    "name": "org.elasticsearch.client.indices.PutIndexTemplateRequest"
  },
  {
    "name": "org.elasticsearch.client.indices.PutMappingRequest"
  },
  {
    "name": "org.elasticsearch.client.tasks.TaskSubmissionResponse"
  },
  {
    "name": "org.elasticsearch.common.util.AbstractArray",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.common.util.BigArrays$AbstractArrayWrapper",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.common.util.BigArrays$ByteArrayWrapper",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.common.util.concurrent.ListenableFuture"
  },
  {
    "name": "org.elasticsearch.common.xcontent.NamedXContentRegistry$Entry"
  },
  {
    "name": "org.elasticsearch.common.xcontent.XContentParser"
  },
  {
    "name": "org.elasticsearch.core.CheckedFunction"
  },
  {
    "name": "org.elasticsearch.core.TimeValue"
  },
  {
    "name": "org.elasticsearch.index.get.GetResult"
  },
  {
    "name": "org.elasticsearch.index.rankeval.RankEvalRequest"
  },
  {
    "name": "org.elasticsearch.index.rankeval.RankEvalResponse"
  },
  {
    "name": "org.elasticsearch.index.reindex.BulkByScrollResponse"
  },
  {
    "name": "org.elasticsearch.index.reindex.DeleteByQueryRequest"
  },
  {
    "name": "org.elasticsearch.index.reindex.ReindexRequest"
  },
  {
    "name": "org.elasticsearch.index.reindex.UpdateByQueryRequest"
  },
  {
    "name": "org.elasticsearch.rest.RestStatus"
  },
  {
    "name": "org.elasticsearch.script.mustache.MultiSearchTemplateRequest"
  },
  {
    "name": "org.elasticsearch.script.mustache.MultiSearchTemplateResponse"
  },
  {
    "name": "org.elasticsearch.script.mustache.SearchTemplateRequest"
  },
  {
    "name": "org.elasticsearch.script.mustache.SearchTemplateResponse"
  },
  {
    "name": "org.elasticsearch.search.SearchHits"
  },
  {
    "name": "org.elasticsearch.search.aggregations.Aggregation"
  },
  {
    "name": "org.elasticsearch.search.suggest.Suggest$Suggestion"
  },
  {
    "name": "org.elasticsearch.search.suggest.Suggest$Suggestion$Entry"
  },
  {
    "name": "org.elasticsearch.search.suggest.Suggest$Suggestion$Entry$Option"
  },
  {
    "name": "org.elasticsearch.search.suggest.SuggestBuilder"
  },
  {
    "name": "org.elasticsearch.transport.TransportMessage",
    "allDeclaredFields": true
  },
  {
    "name": "org.elasticsearch.transport.TransportRequest",
    "allDeclaredFields": true
  },
  {
    "name": "org.jacoco.agent.rt.internal_3570298.PreMain",
    "methods": [
      {
        "name": "premain",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.instrument.Instrumentation"
        ]
      }
    ]
  },
  {
    "name": "org.joda.time.LocalDate"
  },
  {
    "name": "org.joda.time.YearMonth"
  },
  {
    "name": "org.reactivestreams.Publisher"
  },
  {
    "name": "org.slf4j.Logger"
  },
  {
    "name": "org.slf4j.bridge.SLF4JBridgeHandler"
  },
  {
    "name": "org.slf4j.spi.LocationAwareLogger"
  },
  {
    "name": "org.springframework.aop.Advisor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.PointcutAdvisor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.SpringProxy",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.TargetClassAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "getTargetClass",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aop.TargetSource"
  },
  {
    "name": "org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.framework.Advised",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "getTargetSource",
        "parameterTypes": []
      },
      {
        "name": "isFrozen",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aop.framework.AopConfigException"
  },
  {
    "name": "org.springframework.aop.framework.AopInfrastructureBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.framework.ProxyConfig",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.framework.ProxyProcessorSupport",
    "allDeclaredFields": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "setOrder",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.support.AbstractPointcutAdvisor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "equals",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "hashCode",
        "parameterTypes": []
      },
      {
        "name": "isPerInstance",
        "parameterTypes": []
      },
      {
        "name": "setOrder",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.aot.BlogControllerTestContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.BlogDocumentIndexConfigTestContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.BlogRepositoryTestContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.CmsRestApiTestContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.KafkaEventConsumerITestContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.SearchServiceApplicationTestsContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.SiteControllerTestContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.SiteDocumentIndexConfigTestContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.SiteSearchRepositoryTestContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.StaticSpringFactories"
  },
  {
    "name": "org.springframework.aot.TestContextBootstrapInitializer",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "getContextInitializers",
        "parameterTypes": []
      },
      {
        "name": "getContextLoaders",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.test.AotCacheAwareContextLoaderDelegate",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.test.AotDependencyInjectionTestExecutionListener",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aot.test.boot.AotSpringBootConfigContextLoader"
  },
  {
    "name": "org.springframework.aot.test.boot.AotTestSpringApplication",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.beans.BeansException"
  },
  {
    "name": "org.springframework.beans.factory.Aware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.BeanClassLoaderAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.BeanFactory"
  },
  {
    "name": "org.springframework.beans.factory.BeanFactoryAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.BeanNameAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.DisposableBean",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.FactoryBean",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.InitializingBean",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.ListableBeanFactory"
  },
  {
    "name": "org.springframework.beans.factory.NoSuchBeanDefinitionException"
  },
  {
    "name": "org.springframework.beans.factory.ObjectProvider"
  },
  {
    "name": "org.springframework.beans.factory.SmartInitializingSingleton",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.annotation.Autowired",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "required",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.beans.factory.annotation.Qualifier",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.beans.factory.annotation.Value",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.beans.factory.config.BeanDefinition"
  },
  {
    "name": "org.springframework.beans.factory.config.BeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
  },
  {
    "name": "org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.config.PropertiesFactoryBean",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.support.BeanDefinitionRegistry"
  },
  {
    "name": "org.springframework.beans.factory.support.DefaultListableBeanFactory"
  },
  {
    "name": "org.springframework.beans.factory.support.NullBean",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "equals",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hashCode",
        "parameterTypes": []
      },
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.ApplicationArguments"
  },
  {
    "name": "org.springframework.boot.ApplicationRunner",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.LazyInitializationExcludeFilter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.SpringApplication",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "setAllowBeanDefinitionOverriding",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.SpringBootConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.WebApplicationType"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.availability.AvailabilityHealthContributorAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.elasticsearch.ElasticSearchReactiveHealthContributorAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.elasticsearch.ElasticSearchRestHealthContributorAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnAvailableEndpoint",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "endpoint",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.expose.IncludeExcludeEndpointFilter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "match",
        "parameterTypes": [
          "org.springframework.boot.actuate.endpoint.ExposableEndpoint"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.web.MappingWebEndpointPathMapper",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getRootPath",
        "parameterTypes": [
          "org.springframework.boot.actuate.endpoint.EndpointId"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext",
          "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties$Discovery"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties$Exposure"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.endpoint.web.reactive.WebFluxEndpointManagementContextConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.AbstractCompositeHealthContributorConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.AutoConfiguredHealthContributorRegistry",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "registerContributor",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.AutoConfiguredHealthEndpointGroups",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "get",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getNames",
        "parameterTypes": []
      },
      {
        "name": "getPrimary",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.AutoConfiguredReactiveHealthContributorRegistry",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "registerContributor",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.CompositeHealthContributorConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.CompositeReactiveHealthContributorConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration$HealthEndpointGroupsBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "queriedMethods": [
      {
        "name": "getShowDetails",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties$Group"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointReactiveWebExtensionConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointReactiveWebExtensionConfiguration$WebFluxAdditionalHealthEndpointPathsConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getRoles",
        "parameterTypes": []
      },
      {
        "name": "getShowComponents",
        "parameterTypes": []
      },
      {
        "name": "getStatus",
        "parameterTypes": []
      },
      {
        "name": "setRoles",
        "parameterTypes": [
          "java.util.Set"
        ]
      },
      {
        "name": "setShowComponents",
        "parameterTypes": [
          "org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Show"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.HealthProperties$Status"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.info.ConditionalOnEnabledInfoContributor",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "fallback",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties$Git"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.KafkaMetricsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.KafkaMetricsAutoConfiguration$$Lambda$2438/0x0000000801702ed8",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.kafka.core.DefaultKafkaProducerFactory"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.KafkaMetricsAutoConfiguration$$Lambda$2440/0x0000000801703370",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.kafka.core.DefaultKafkaConsumerFactory"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.KafkaMetricsAutoConfiguration$KafkaStreamsMetricsConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.KafkaMetricsAutoConfiguration$KafkaStreamsMetricsConfiguration$$Lambda$2436/0x0000000801702a40",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.kafka.config.StreamsBuilderFactoryBean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryConfigurer"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Data"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Distribution"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$System"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.PropertiesMeterFilter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "accept",
        "parameterTypes": [
          "io.micrometer.core.instrument.Meter$Id"
        ]
      },
      {
        "name": "configure",
        "parameterTypes": [
          "io.micrometer.core.instrument.Meter$Id",
          "io.micrometer.core.instrument.distribution.DistributionStatisticConfig"
        ]
      },
      {
        "name": "map",
        "parameterTypes": [
          "io.micrometer.core.instrument.Meter$Id"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.ServiceLevelObjectiveBoundary"
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.ValidationFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.data.MetricsRepositoryMethodInvocationListenerBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessBeforeInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.data.RepositoryMetricsAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.export.ConditionalOnEnabledMetricsExport",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.export.properties.PropertiesConfigAdapter",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimplePropertiesConfigAdapter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "get",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "mode",
        "parameterTypes": []
      },
      {
        "name": "prefix",
        "parameterTypes": []
      },
      {
        "name": "step",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.integration.IntegrationMetricsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.startup.StartupTimeMetricsListenerAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.task.TaskExecutorMetricsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.web.client.WebClientMetricsConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.metrics.web.reactive.WebFluxMetricsAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthContributorAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.reactive.ReactiveManagementContextAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.reactive.ReactiveManagementContextFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "createManagementContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext",
          "java.lang.Class[]"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.server.ConditionalOnManagementPort",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.server.EnableManagementContext",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.core.env.Environment"
        ]
      },
      {
        "name": "afterSingletonsInstantiated",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.actuate.availability.LivenessStateHealthIndicator"
  },
  {
    "name": "org.springframework.boot.actuate.availability.ReadinessStateHealthIndicator"
  },
  {
    "name": "org.springframework.boot.actuate.elasticsearch.ElasticsearchReactiveHealthIndicator",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.elasticsearch.ElasticsearchRestHealthIndicator"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.ApiVersion"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.EndpointFilter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.EndpointId"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.EndpointsSupplier",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.ExposableEndpoint"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.Operation"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.OperationType"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.SecurityContext"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.DiscoveredOperationMethod"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.DiscoveredOperationsFactory"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.Endpoint",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "enableByDefault",
        "parameterTypes": []
      },
      {
        "name": "id",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.EndpointConverter",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getEndpoints",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$EndpointBean"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$ExtensionBean"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer$OperationKey"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.EndpointExtension",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "endpoint",
        "parameterTypes": []
      },
      {
        "name": "filter",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.ReadOperation",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "produces",
        "parameterTypes": []
      },
      {
        "name": "producesFrom",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.annotation.Selector",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "match",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.invoke.OperationInvoker"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.invoke.OperationInvokerAdvisor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.invoke.OperationParameter"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.invoke.OperationParameters"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.invoke.ParameterMappingException"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.invoke.convert.ConversionServiceParameterValueMapper",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "mapParameterValue",
        "parameterTypes": [
          "org.springframework.boot.actuate.endpoint.invoke.OperationParameter",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "apply",
        "parameterTypes": [
          "org.springframework.boot.actuate.endpoint.EndpointId",
          "org.springframework.boot.actuate.endpoint.OperationType",
          "org.springframework.boot.actuate.endpoint.invoke.OperationParameters",
          "org.springframework.boot.actuate.endpoint.invoke.OperationInvoker"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.PathMappedEndpoint"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "iterator",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.PathMapper",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.WebEndpointResponse"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.WebOperation"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.WebServerNamespace"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.annotation.EndpointWebExtension",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "endpoint",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.annotation.ExposableControllerEndpoint"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getEndpoints",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping$LinksHandler",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping$ReactiveWebOperation"
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping$ReadOperationHandler",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.reactive.AbstractWebFluxEndpointHandlerMapping$WriteOperationHandler",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.reactive.AdditionalHealthEndpointPathsWebFluxHandlerMapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.reactive.ControllerEndpointHandlerMapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$WebFluxLinksHandler",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.AbstractHealthIndicator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "health",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.health.AbstractReactiveHealthIndicator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "health",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.health.AdditionalHealthEndpointPath"
  },
  {
    "name": "org.springframework.boot.actuate.health.CompositeHealth"
  },
  {
    "name": "org.springframework.boot.actuate.health.CompositeHealthContributor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.CompositeReactiveHealthContributor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.ContributorRegistry",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.DefaultContributorRegistry",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getContributor",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "unregisterContributor",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.health.DefaultHealthContributorRegistry",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "iterator",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.health.DefaultReactiveHealthContributorRegistry",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "iterator",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.health.Health"
  },
  {
    "name": "org.springframework.boot.actuate.health.Health$Builder"
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthComponent"
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthContributor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthContributorRegistry",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthEndpoint",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthEndpointGroup"
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthEndpointGroups",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthEndpointGroupsPostProcessor"
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthEndpointSupport",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthEndpointSupport$HealthResult"
  },
  {
    "name": "org.springframework.boot.actuate.health.HealthIndicator",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.HttpCodeStatusMapper",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.NamedContributor"
  },
  {
    "name": "org.springframework.boot.actuate.health.NamedContributors",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.PingHealthIndicator",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.ReactiveHealthContributor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.ReactiveHealthEndpointWebExtension",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.ReactiveHealthIndicator",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.health.SimpleHttpCodeStatusMapper",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getStatusCode",
        "parameterTypes": [
          "org.springframework.boot.actuate.health.Status"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.health.SimpleStatusAggregator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getAggregateStatus",
        "parameterTypes": [
          "java.util.Set"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.health.Status"
  },
  {
    "name": "org.springframework.boot.actuate.health.StatusAggregator",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.info.EnvironmentInfoContributor"
  },
  {
    "name": "org.springframework.boot.actuate.info.GitInfoContributor"
  },
  {
    "name": "org.springframework.boot.actuate.info.InfoContributor"
  },
  {
    "name": "org.springframework.boot.actuate.info.JavaInfoContributor"
  },
  {
    "name": "org.springframework.boot.actuate.metrics.data.DefaultRepositoryTagsProvider",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "repositoryTags",
        "parameterTypes": [
          "org.springframework.data.repository.core.support.RepositoryMethodInvocationListener$RepositoryMethodInvocation"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.metrics.data.MetricsRepositoryMethodInvocationListener",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterInvocation",
        "parameterTypes": [
          "org.springframework.data.repository.core.support.RepositoryMethodInvocationListener$RepositoryMethodInvocation"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.metrics.data.RepositoryTagsProvider",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.metrics.startup.StartupTimeMetricsListener",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      },
      {
        "name": "supportsEventType",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.metrics.system.DiskSpaceMetricsBinder",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "bindTo",
        "parameterTypes": [
          "io.micrometer.core.instrument.MeterRegistry"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.metrics.web.reactive.client.DefaultWebClientExchangeTagsProvider",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "tags",
        "parameterTypes": [
          "org.springframework.web.reactive.function.client.ClientRequest",
          "org.springframework.web.reactive.function.client.ClientResponse",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.metrics.web.reactive.client.MetricsWebClientCustomizer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.web.reactive.function.client.WebClient$Builder"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.metrics.web.reactive.client.WebClientExchangeTagsProvider",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.metrics.web.reactive.server.DefaultWebFluxTagsProvider",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "httpRequestTags",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "filter",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "org.springframework.web.server.WebFilterChain"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.actuate.metrics.web.reactive.server.WebFluxTagsProvider",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.actuate.system.DiskSpaceHealthIndicator",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigurationPackage",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "basePackageClasses",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigurationPackages$BasePackages",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigureAfter",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigureBefore",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigureOrder",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.EnableAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "exclude",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.ImportAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "classes",
        "parameterTypes": []
      },
      {
        "name": "exclude",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer$SharedMetadataReaderFactoryBean",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.SpringBootApplication",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "exclude",
        "parameterTypes": []
      },
      {
        "name": "nameGenerator",
        "parameterTypes": []
      },
      {
        "name": "scanBasePackageClasses",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.aop.AopAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$JdkDynamicAutoProxyConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.codec.CodecProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "setMaxInMemorySize",
        "parameterTypes": [
          "org.springframework.util.unit.DataSize"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnBean",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "annotation",
        "parameterTypes": []
      },
      {
        "name": "parameterizedContainer",
        "parameterTypes": []
      },
      {
        "name": "search",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnClass",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "annotation",
        "parameterTypes": []
      },
      {
        "name": "ignored",
        "parameterTypes": []
      },
      {
        "name": "parameterizedContainer",
        "parameterTypes": []
      },
      {
        "name": "search",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnProperty",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnResource",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "search",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "type",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.context.LifecycleProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.DeprecatedReactiveElasticsearchRestClientProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "getEndpoints",
        "parameterTypes": []
      },
      {
        "name": "setEndpoints",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration$BaseConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration$ReactiveRestClientConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataConfiguration$RestClientConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchProperties",
          "org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientProperties",
          "org.springframework.boot.autoconfigure.data.elasticsearch.DeprecatedReactiveElasticsearchRestClientProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration$ConsolidatedProperties$Credentials"
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.DeprecatedElasticsearchRestClientProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "getUris",
        "parameterTypes": []
      },
      {
        "name": "setUris",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.DeprecatedElasticsearchRestClientProperties$Sniffer"
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations$ConsolidatedProperties"
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations$DefaultRestClientBuilderCustomizer",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations$RestClientBuilderConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchProperties",
          "org.springframework.boot.autoconfigure.elasticsearch.DeprecatedElasticsearchRestClientProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations$RestHighLevelClientConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientProperties$Sniffer"
  },
  {
    "name": "org.springframework.boot.autoconfigure.elasticsearch.RestClientBuilderCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializerDatabaseInitializerDetector",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$DefaultCodecsConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$DefaultCodecsConfiguration$$Lambda$2181/0x0000000801693fd8",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.http.codec.CodecConfigurer"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration$$Lambda$2183/0x0000000801694470",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.http.codec.CodecConfigurer"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.info.ProjectInfoProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build"
  },
  {
    "name": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git"
  },
  {
    "name": "org.springframework.boot.autoconfigure.integration.IntegrationPropertiesEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder"
        ]
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "getSerialization",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonProperties$ConstructorDetectorStrategy"
  },
  {
    "name": "org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer"
  },
  {
    "name": "org.springframework.boot.autoconfigure.jooq.NoDslContextBeanFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.ConcurrentKafkaListenerContainerFactoryConfigurer",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.DefaultKafkaConsumerFactoryCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.DefaultKafkaProducerFactoryCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration$EnableKafkaConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "getBootstrapServers",
        "parameterTypes": []
      },
      {
        "name": "getConsumer",
        "parameterTypes": []
      },
      {
        "name": "getProducer",
        "parameterTypes": []
      },
      {
        "name": "setBootstrapServers",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin"
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "getProperties",
        "parameterTypes": []
      },
      {
        "name": "setEnableAutoCommit",
        "parameterTypes": [
          "java.lang.Boolean"
        ]
      },
      {
        "name": "setGroupId",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setKeyDeserializer",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "setMaxPollRecords",
        "parameterTypes": [
          "java.lang.Integer"
        ]
      },
      {
        "name": "setValueDeserializer",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas"
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "setKeySerializer",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "setValueSerializer",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Security"
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Streams"
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Template"
  },
  {
    "name": "org.springframework.boot.autoconfigure.kafka.StreamsBuilderFactoryBeanCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.netty.NettyProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.netty.NettyProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.netty.NettyProperties$LeakDetection"
  },
  {
    "name": "org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBeanCreationFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.r2dbc.MissingR2dbcPoolDependencyFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.r2dbc.MultipleConnectionPoolConfigurationsFailureAnalzyer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.r2dbc.NoConnectionFactoryBeanFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.SecurityProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.SecurityProperties$Filter"
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.SecurityProperties$User"
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.ScheduledBeanLazyInitializationExcludeFilter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "isExcluded",
        "parameterTypes": [
          "java.lang.String",
          "org.springframework.beans.factory.config.BeanDefinition",
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutionProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Pool"
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutionProperties$Shutdown"
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskSchedulingProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Pool"
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskSchedulingProperties$Shutdown"
  },
  {
    "name": "org.springframework.boot.autoconfigure.transaction.PlatformTransactionManagerCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.transaction.PlatformTransactionManager"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ErrorProperties"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ServerProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "setPort",
        "parameterTypes": [
          "java.lang.Integer"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ServerProperties$ForwardHeadersStrategy"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ServerProperties$Netty"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ServerProperties$Reactive"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.WebProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.WebProperties$LocaleResolver"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.WebProperties$Resources"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$NettyWebServerFactoryCustomizerConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.embedded.NettyWebServerFactoryCustomizer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.boot.web.server.WebServerFactory"
        ]
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.format.DateTimeFormatters"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.format.WebConversionService",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration$AnnotationConfig",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration$$Lambda$2185/0x0000000801694908",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.http.codec.CodecConfigurer"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedNetty",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryCustomizer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.boot.web.server.WebServerFactory"
        ]
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.TomcatReactiveWebServerFactoryCustomizer"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$EnableWebFluxConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
          "org.springframework.boot.autoconfigure.web.WebProperties",
          "org.springframework.boot.autoconfigure.web.ServerProperties",
          "org.springframework.beans.factory.ObjectProvider"
        ]
      },
      {
        "name": "localeContextResolver",
        "parameterTypes": []
      },
      {
        "name": "webFluxConversionService",
        "parameterTypes": []
      },
      {
        "name": "webFluxValidator",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$WebFluxConfig",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.web.WebProperties",
          "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
          "org.springframework.beans.factory.ListableBeanFactory",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider"
        ]
      },
      {
        "name": "addFormatters",
        "parameterTypes": [
          "org.springframework.format.FormatterRegistry"
        ]
      },
      {
        "name": "addResourceHandlers",
        "parameterTypes": [
          "org.springframework.web.reactive.config.ResourceHandlerRegistry"
        ]
      },
      {
        "name": "configureArgumentResolvers",
        "parameterTypes": [
          "org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer"
        ]
      },
      {
        "name": "configureHttpMessageCodecs",
        "parameterTypes": [
          "org.springframework.http.codec.ServerCodecConfigurer"
        ]
      },
      {
        "name": "configureViewResolvers",
        "parameterTypes": [
          "org.springframework.web.reactive.config.ViewResolverRegistry"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$WelcomePageConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties$Format"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties$Session"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.web.ServerProperties",
          "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      },
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "setMessageReaders",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setMessageWriters",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setViewResolvers",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.web.ServerProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorConfiguration$ReactorNetty",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.ReactorNettyHttpClientMapper"
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration$WebClientCodecsConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientCodecCustomizer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.web.reactive.function.client.WebClient$Builder"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.availability.ApplicationAvailability",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.availability.ApplicationAvailabilityBean",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getLastChangeEvent",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "getState",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "getState",
        "parameterTypes": [
          "java.lang.Class",
          "org.springframework.boot.availability.AvailabilityState"
        ]
      },
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.availability.AvailabilityChangeEvent"
  },
  {
    "name": "org.springframework.boot.availability.AvailabilityState"
  },
  {
    "name": "org.springframework.boot.availability.LivenessState"
  },
  {
    "name": "org.springframework.boot.availability.ReadinessState"
  },
  {
    "name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.apache.commons.logging.Log"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.logging.DeferredLogFactory",
          "org.springframework.boot.ConfigurableBootstrapContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.ConfigDataNotFoundFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.ConfigDataProperties",
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.boot.context.config.ConfigTreeConfigDataLoader",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.core.io.ResourceLoader"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.StandardConfigDataLoader",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.StandardConfigDataLocationResolver",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.apache.commons.logging.Log",
          "org.springframework.boot.context.properties.bind.Binder",
          "org.springframework.core.io.ResourceLoader"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.event.ApplicationReadyEvent"
  },
  {
    "name": "org.springframework.boot.context.event.ApplicationStartedEvent"
  },
  {
    "name": "org.springframework.boot.context.event.EventPublishingRunListener",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.SpringApplication",
          "java.lang.String[]"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.properties.BoundConfigurationProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.context.properties.ConfigurationProperties",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "ignoreInvalidFields",
        "parameterTypes": []
      },
      {
        "name": "ignoreUnknownFields",
        "parameterTypes": []
      },
      {
        "name": "prefix",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.properties.ConfigurationPropertiesBindHandlerAdvisor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.context.properties.ConfigurationPropertiesBinder",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.properties.ConfigurationPropertiesBinder$Factory",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.context.properties.ConstructorBinding",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.context.properties.DeprecatedConfigurationProperty",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.context.properties.EnableConfigurationProperties",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.properties.IncompatibleConfigurationFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.properties.NotConstructorBoundInjectionFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.properties.PropertyMapper"
  },
  {
    "name": "org.springframework.boot.context.properties.bind.BindHandler"
  },
  {
    "name": "org.springframework.boot.context.properties.bind.Binder"
  },
  {
    "name": "org.springframework.boot.context.properties.bind.Name",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.properties.source.ConfigurationProperty"
  },
  {
    "name": "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
  },
  {
    "name": "org.springframework.boot.diagnostics.FailureAnalyzers",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.context.ConfigurableApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.BeanDefinitionOverrideFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyNameFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.NoSuchMethodFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.PatternParseFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.UnboundConfigurationPropertyFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer"
  },
  {
    "name": "org.springframework.boot.env.RandomValuePropertySourceEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.apache.commons.logging.Log"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.flyway.FlywayDatabaseInitializerDetector",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.info.BuildProperties"
  },
  {
    "name": "org.springframework.boot.info.GitProperties"
  },
  {
    "name": "org.springframework.boot.jackson.JsonComponent$Scope"
  },
  {
    "name": "org.springframework.boot.jackson.JsonComponentModule",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      },
      {
        "name": "setBeanFactory",
        "parameterTypes": [
          "org.springframework.beans.factory.BeanFactory"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.jdbc.AbstractDataSourceInitializerDatabaseInitializerDetector",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializerDetector",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.liquibase.LiquibaseChangelogMissingFailureAnalyzer"
  },
  {
    "name": "org.springframework.boot.liquibase.LiquibaseDatabaseInitializerDetector",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.logging.logback.ColorConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.orm.jpa.JpaDatabaseInitializerDetector",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.core.env.Environment"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.r2dbc.init.R2dbcScriptDatabaseInitializerDetector",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.reactor.DebugAgentEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.sql.init.DatabaseInitializationMode"
  },
  {
    "name": "org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.core.env.Environment"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.task.TaskExecutorBuilder",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.task.TaskExecutorCustomizer"
  },
  {
    "name": "org.springframework.boot.task.TaskSchedulerBuilder",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.task.TaskSchedulerCustomizer"
  },
  {
    "name": "org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory"
  },
  {
    "name": "org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter$$Lambda$2175/0x0000000801692658",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.client.RestTemplateBuilder"
  },
  {
    "name": "org.springframework.boot.web.client.RestTemplateCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.codec.CodecCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.context.ConfigurableWebServerApplicationContext"
  },
  {
    "name": "org.springframework.boot.web.context.WebServerInitializedEvent"
  },
  {
    "name": "org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getShutdown",
        "parameterTypes": []
      },
      {
        "name": "getWebServer",
        "parameterTypes": [
          "org.springframework.http.server.reactive.HttpHandler"
        ]
      },
      {
        "name": "setShutdown",
        "parameterTypes": [
          "org.springframework.boot.web.server.Shutdown"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.web.embedded.netty.NettyRouteProvider"
  },
  {
    "name": "org.springframework.boot.web.embedded.netty.NettyServerCustomizer"
  },
  {
    "name": "org.springframework.boot.web.embedded.netty.NettyWebServer"
  },
  {
    "name": "org.springframework.boot.web.error.ErrorAttributeOptions"
  },
  {
    "name": "org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext"
  },
  {
    "name": "org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext"
  },
  {
    "name": "org.springframework.boot.web.reactive.error.DefaultErrorAttributes",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getError",
        "parameterTypes": [
          "org.springframework.web.reactive.function.server.ServerRequest"
        ]
      },
      {
        "name": "getErrorAttributes",
        "parameterTypes": [
          "org.springframework.web.reactive.function.server.ServerRequest",
          "org.springframework.boot.web.error.ErrorAttributeOptions"
        ]
      },
      {
        "name": "storeErrorInformation",
        "parameterTypes": [
          "java.lang.Throwable",
          "org.springframework.web.server.ServerWebExchange"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.web.reactive.error.ErrorAttributes",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.reactive.error.ErrorWebExceptionHandler",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.reactive.filter.OrderedHiddenHttpMethodFilter"
  },
  {
    "name": "org.springframework.boot.web.reactive.function.client.WebClientCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.web.reactive.server.ConfigurableReactiveWebServerFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.reactive.server.ReactiveWebServerFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.server.AbstractConfigurableWebServerFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "addErrorPages",
        "parameterTypes": [
          "org.springframework.boot.web.server.ErrorPage[]"
        ]
      },
      {
        "name": "getAddress",
        "parameterTypes": []
      },
      {
        "name": "getCompression",
        "parameterTypes": []
      },
      {
        "name": "getErrorPages",
        "parameterTypes": []
      },
      {
        "name": "getHttp2",
        "parameterTypes": []
      },
      {
        "name": "getPort",
        "parameterTypes": []
      },
      {
        "name": "getServerHeader",
        "parameterTypes": []
      },
      {
        "name": "getSsl",
        "parameterTypes": []
      },
      {
        "name": "getSslStoreProvider",
        "parameterTypes": []
      },
      {
        "name": "setAddress",
        "parameterTypes": [
          "java.net.InetAddress"
        ]
      },
      {
        "name": "setCompression",
        "parameterTypes": [
          "org.springframework.boot.web.server.Compression"
        ]
      },
      {
        "name": "setErrorPages",
        "parameterTypes": [
          "java.util.Set"
        ]
      },
      {
        "name": "setHttp2",
        "parameterTypes": [
          "org.springframework.boot.web.server.Http2"
        ]
      },
      {
        "name": "setPort",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setServerHeader",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setSsl",
        "parameterTypes": [
          "org.springframework.boot.web.server.Ssl"
        ]
      },
      {
        "name": "setSslStoreProvider",
        "parameterTypes": [
          "org.springframework.boot.web.server.SslStoreProvider"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.web.server.Compression"
  },
  {
    "name": "org.springframework.boot.web.server.ConfigurableWebServerFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.server.Cookie"
  },
  {
    "name": "org.springframework.boot.web.server.ErrorPage"
  },
  {
    "name": "org.springframework.boot.web.server.ErrorPageRegistry",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.server.Http2"
  },
  {
    "name": "org.springframework.boot.web.server.LocalServerPort",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.web.server.Shutdown"
  },
  {
    "name": "org.springframework.boot.web.server.Ssl"
  },
  {
    "name": "org.springframework.boot.web.server.SslStoreProvider"
  },
  {
    "name": "org.springframework.boot.web.server.WebServer"
  },
  {
    "name": "org.springframework.boot.web.server.WebServerFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.server.WebServerFactoryCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterSingletonsInstantiated",
        "parameterTypes": []
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.autoconfigure.PauseResumeEndpointsConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration$RefreshEndpointConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.autoconfigure.RestartEndpointWithoutIntegrationConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.bootstrap.encrypt.DecryptEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.bootstrap.encrypt.KeyProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.bootstrap.encrypt.RsaProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.client.CommonsClientAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.CommonsClientAutoConfiguration$ActuatorConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.ConditionalOnBlockingDiscoveryEnabled",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.ConditionalOnDiscoveryEnabled",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.ConditionalOnDiscoveryHealthIndicatorEnabled",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.ConditionalOnReactiveDiscoveryEnabled",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.DefaultServiceInstance"
  },
  {
    "name": "org.springframework.cloud.client.HostInfoEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.ReactiveCommonsClientAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.ReactiveCommonsClientAutoConfiguration$ReactiveDiscoveryLoadBalancerConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.actuator.FeaturesEndpoint"
  },
  {
    "name": "org.springframework.cloud.client.actuator.HasFeatures",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.actuator.NamedFeature"
  },
  {
    "name": "org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory"
  },
  {
    "name": "org.springframework.cloud.client.circuitbreaker.ConfigBuilder"
  },
  {
    "name": "org.springframework.cloud.client.circuitbreaker.ReactiveCircuitBreakerFactory"
  },
  {
    "name": "org.springframework.cloud.client.discovery.DiscoveryClient",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.client.discovery.ReactiveDiscoveryClient",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClient",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "description",
        "parameterTypes": []
      },
      {
        "name": "getInstances",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getServices",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.discovery.composite.reactive.ReactiveCompositeDiscoveryClient",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "description",
        "parameterTypes": []
      },
      {
        "name": "getInstances",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getServices",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.composite.reactive.ReactiveCompositeDiscoveryClientAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.discovery.event.InstanceRegisteredEvent"
  },
  {
    "name": "org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getName",
        "parameterTypes": []
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "health",
        "parameterTypes": []
      },
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "queriedMethods": [
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.health.DiscoveryCompositeHealthContributor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getContributor",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "iterator",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.health.DiscoveryHealthIndicator",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.client.discovery.health.reactive.ReactiveDiscoveryClientHealthIndicator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getName",
        "parameterTypes": []
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "health",
        "parameterTypes": []
      },
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.health.reactive.ReactiveDiscoveryCompositeHealthContributor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getContributor",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "iterator",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.health.reactive.ReactiveDiscoveryHealthIndicator",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClient",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "description",
        "parameterTypes": []
      },
      {
        "name": "getInstances",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "getServices",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "init",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.simple.reactive.SimpleReactiveDiscoveryClient",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "description",
        "parameterTypes": []
      },
      {
        "name": "getInstances",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "getServices",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.simple.reactive.SimpleReactiveDiscoveryClientAutoConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.discovery.simple.reactive.SimpleReactiveDiscoveryClientAutoConfiguration$HealthConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.discovery.simple.reactive.SimpleReactiveDiscoveryProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "init",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda$1344/0x000000080115da68",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getDefaultMappings",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "init",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "apply",
        "parameterTypes": [
          "org.springframework.boot.context.properties.bind.BindHandler"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor$MappingsProvider",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.commons.httpclient.ApacheHttpClientConnectionManagerFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.commons.httpclient.ApacheHttpClientFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.commons.httpclient.DefaultApacheHttpClientConnectionManagerFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "newConnectionManager",
        "parameterTypes": [
          "boolean",
          "int",
          "int",
          "long",
          "java.util.concurrent.TimeUnit",
          "org.apache.http.config.RegistryBuilder"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.commons.httpclient.DefaultApacheHttpClientFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "createBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.commons.httpclient.HttpClientConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.commons.httpclient.HttpClientConfiguration$ApacheHttpClientConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.commons.util.InetUtils",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "close",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.commons.util.InetUtils$HostInfo"
  },
  {
    "name": "org.springframework.cloud.commons.util.InetUtilsProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.commons.util.UtilAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.configuration.CompatibilityNotMetFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.context.environment.EnvironmentChangeEvent"
  },
  {
    "name": "org.springframework.cloud.context.environment.EnvironmentManager",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "setApplicationEventPublisher",
        "parameterTypes": [
          "org.springframework.context.ApplicationEventPublisher"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.context.properties.ConfigurationPropertiesBeans",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      },
      {
        "name": "postProcessBeforeInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.context.refresh.ContextRefresher"
  },
  {
    "name": "org.springframework.cloud.context.restart.RestartEndpoint"
  },
  {
    "name": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint"
  },
  {
    "name": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint"
  },
  {
    "name": "org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent"
  },
  {
    "name": "org.springframework.cloud.endpoint.RefreshEndpoint"
  },
  {
    "name": "org.springframework.cloud.health.RefreshScopeHealthIndicator",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.BaggageInScope"
  },
  {
    "name": "org.springframework.cloud.sleuth.BaggageManager",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.CurrentTraceContext",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.CurrentTraceContext$Scope"
  },
  {
    "name": "org.springframework.cloud.sleuth.ScopedSpan"
  },
  {
    "name": "org.springframework.cloud.sleuth.Span"
  },
  {
    "name": "org.springframework.cloud.sleuth.Span$Builder"
  },
  {
    "name": "org.springframework.cloud.sleuth.SpanCustomizer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.SpanName"
  },
  {
    "name": "org.springframework.cloud.sleuth.SpanNamer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.TraceContext"
  },
  {
    "name": "org.springframework.cloud.sleuth.TraceContext$Builder"
  },
  {
    "name": "org.springframework.cloud.sleuth.Tracer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.Tracer$SpanInScope"
  },
  {
    "name": "org.springframework.cloud.sleuth.annotation.ContinueSpan"
  },
  {
    "name": "org.springframework.cloud.sleuth.annotation.NewSpan",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "name",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.annotation.NewSpanParser",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.annotation.NoOpTagValueResolver",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "resolve",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.annotation.SleuthMethodInvocationProcessor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.annotation.TagValueExpressionResolver",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.annotation.TagValueResolver",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.SingleSkipPattern",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.SleuthAnnotationConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.SleuthBaggageProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.SleuthSpanFilterProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.SleuthTracerProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.SleuthTracerProperties$TracerMode"
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.TraceConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.TraceEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.BraveAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.BraveBaggageConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.BraveBridgeConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.BraveBridgeConfiguration$BraveReactorContextBeanDefinitionRegistryPostProcessor"
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.BraveSamplerConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.ConditionalOnBraveEnabled",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.SamplerProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.SleuthPropagationProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.SleuthProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.instrument.messaging.BraveKafkaStreamsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.instrument.messaging.BraveMessagingAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.instrument.messaging.KafkaStreamsBuilderFactoryBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.instrument.rpc.BraveRpcAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.instrument.web.BraveHttpBridgeConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.instrument.web.BraveHttpConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.brave.instrument.web.BraveHttpConfiguration$BraveWebFilterConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.circuitbreaker.SleuthCircuitBreakerProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.circuitbreaker.TraceCircuitBreakerAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.kafka.TracingKafkaAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.kafka.TracingKafkaConsumerBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.kafka.TracingKafkaProducerBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.messaging.SleuthIntegrationMessagingProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.messaging.SleuthMessagingProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "getKafka",
        "parameterTypes": []
      },
      {
        "name": "setKafka",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.autoconfig.instrument.messaging.SleuthMessagingProperties$Kafka"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.messaging.SleuthMessagingProperties$Aspect"
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.messaging.SleuthMessagingProperties$Jms"
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.messaging.SleuthMessagingProperties$Kafka",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "setEnabled",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.messaging.SleuthMessagingProperties$Rabbit"
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.messaging.TraceSpringMessagingAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.reactor.HooksRefresher",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.reactor.SleuthReactorProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.reactor.SleuthReactorProperties$InstrumentationType"
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.reactor.TraceReactorAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.reactor.TraceReactorAutoConfiguration$TraceReactorConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.reactor.TraceReactorAutoConfiguration$TraceReactorConfiguration$HooksRefresherConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.scheduling.SleuthSchedulingProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.scheduling.TraceSchedulingAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.security.TraceSecurityAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.tx.TraceKafkaPlatformTransactionManagerBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.tx.TracePlatformTransactionManagerBeanPostProcessor"
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.tx.TraceReactiveTransactionManagerBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.tx.TraceTxAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.ConditionalOnSleuthHttp",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.ConditionalOnSleuthWeb",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SkipPatternConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SkipPatternConfiguration$$Lambda$2417/0x00000008016f3240",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "skipPattern",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SkipPatternConfiguration$ActuatorSkipPatternProviderConfig",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SkipPatternConfiguration$ActuatorSkipPatternProviderConfig$$Lambda$2413/0x00000008016f2948",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "skipPattern",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SkipPatternConfiguration$DefaultSkipPatternConfig",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SkipPatternConfiguration$DefaultSkipPatternConfig$$Lambda$2411/0x00000008016f24b0",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "skipPattern",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SkipPatternConfiguration$ManagementSkipPatternProviderConfig",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SleuthHttpProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SleuthWebProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SleuthWebProperties$Client"
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.SleuthWebProperties$Servlet"
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.TraceHandlerFunctionAdapterBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.TraceWebAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.TraceWebFluxConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.client.ConditionalnOnSleuthWebClient",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.client.TraceGatewayEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.client.TraceWebAsyncClientAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.client.TraceWebClientAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.client.TraceWebClientAutoConfiguration$NettyConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.client.TraceWebClientAutoConfiguration$RestTemplateConfig",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.autoconfig.instrument.web.client.TraceWebClientAutoConfiguration$WebClientConfig",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.LocalServiceName",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.bridge.BraveCurrentTraceContext",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "context",
        "parameterTypes": []
      },
      {
        "name": "maybeScope",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.TraceContext"
        ]
      },
      {
        "name": "newScope",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.TraceContext"
        ]
      },
      {
        "name": "wrap",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      },
      {
        "name": "wrap",
        "parameterTypes": [
          "java.util.concurrent.Callable"
        ]
      },
      {
        "name": "wrap",
        "parameterTypes": [
          "java.util.concurrent.Executor"
        ]
      },
      {
        "name": "wrap",
        "parameterTypes": [
          "java.util.concurrent.ExecutorService"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.bridge.BraveHttpClientHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handleReceive",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.http.HttpClientResponse",
          "org.springframework.cloud.sleuth.Span"
        ]
      },
      {
        "name": "handleSend",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.http.HttpClientRequest"
        ]
      },
      {
        "name": "handleSend",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.http.HttpClientRequest",
          "org.springframework.cloud.sleuth.TraceContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.bridge.BraveHttpServerHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handleReceive",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.http.HttpServerRequest"
        ]
      },
      {
        "name": "handleSend",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.http.HttpServerResponse",
          "org.springframework.cloud.sleuth.Span"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.bridge.BravePropagator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "extract",
        "parameterTypes": [
          "java.lang.Object",
          "org.springframework.cloud.sleuth.propagation.Propagator$Getter"
        ]
      },
      {
        "name": "fields",
        "parameterTypes": []
      },
      {
        "name": "inject",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.TraceContext",
          "java.lang.Object",
          "org.springframework.cloud.sleuth.propagation.Propagator$Setter"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.bridge.BraveSpanCustomizer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "event",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "name",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "tag",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.bridge.BraveTracer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "createBaggage",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "createBaggage",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "currentSpan",
        "parameterTypes": []
      },
      {
        "name": "currentSpanCustomizer",
        "parameterTypes": []
      },
      {
        "name": "currentTraceContext",
        "parameterTypes": []
      },
      {
        "name": "getAllBaggage",
        "parameterTypes": []
      },
      {
        "name": "getBaggage",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getBaggage",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.TraceContext",
          "java.lang.String"
        ]
      },
      {
        "name": "nextSpan",
        "parameterTypes": []
      },
      {
        "name": "nextSpan",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.Span"
        ]
      },
      {
        "name": "spanBuilder",
        "parameterTypes": []
      },
      {
        "name": "startScopedSpan",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "traceContextBuilder",
        "parameterTypes": []
      },
      {
        "name": "withSpan",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.Span"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.bridge.CompositePropagationFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "create",
        "parameterTypes": [
          "brave.propagation.Propagation$KeyFactory"
        ]
      },
      {
        "name": "decorate",
        "parameterTypes": [
          "brave.propagation.TraceContext"
        ]
      },
      {
        "name": "extractor",
        "parameterTypes": [
          "brave.propagation.Propagation$Getter"
        ]
      },
      {
        "name": "injector",
        "parameterTypes": [
          "brave.propagation.Propagation$Setter"
        ]
      },
      {
        "name": "keys",
        "parameterTypes": []
      },
      {
        "name": "requires128BitTraceId",
        "parameterTypes": []
      },
      {
        "name": "supportsJoin",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.bridge.CompositePropagationFactorySupplier",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "get",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.bridge.CompositeSpanHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "end",
        "parameterTypes": [
          "brave.propagation.TraceContext",
          "brave.handler.MutableSpan",
          "brave.handler.SpanHandler$Cause"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.instrument.messaging.ConditionalOnMessagingEnabled",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.instrument.messaging.ConsumerSampler",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.instrument.messaging.ProducerSampler",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.instrument.rpc.RpcClientSampler",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.instrument.rpc.RpcServerSampler",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.instrument.web.BraveSpanFromContextRetriever",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "findSpan",
        "parameterTypes": [
          "reactor.util.context.Context"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.brave.propagation.PropagationFactorySupplier",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.exporter.FinishedSpan"
  },
  {
    "name": "org.springframework.cloud.sleuth.exporter.SpanFilter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.exporter.SpanIgnoringSpanFilter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "isExportable",
        "parameterTypes": [
          "org.springframework.cloud.sleuth.exporter.FinishedSpan"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.exporter.SpanReporter"
  },
  {
    "name": "org.springframework.cloud.sleuth.http.HttpClientHandler",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.http.HttpClientRequest"
  },
  {
    "name": "org.springframework.cloud.sleuth.http.HttpClientResponse"
  },
  {
    "name": "org.springframework.cloud.sleuth.http.HttpServerHandler",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.http.HttpServerRequest"
  },
  {
    "name": "org.springframework.cloud.sleuth.http.HttpServerResponse"
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.annotation.AbstractSleuthMethodInvocationProcessor",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.annotation.DefaultSpanCreator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "parse",
        "parameterTypes": [
          "org.aopalliance.intercept.MethodInvocation",
          "org.springframework.cloud.sleuth.annotation.NewSpan",
          "org.springframework.cloud.sleuth.Span"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.annotation.NonReactorSleuthMethodInvocationProcessor"
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.annotation.ReactorSleuthMethodInvocationProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "process",
        "parameterTypes": [
          "org.aopalliance.intercept.MethodInvocation",
          "org.springframework.cloud.sleuth.annotation.NewSpan",
          "org.springframework.cloud.sleuth.annotation.ContinueSpan"
        ]
      },
      {
        "name": "setBeanFactory",
        "parameterTypes": [
          "org.springframework.beans.factory.BeanFactory"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.annotation.SleuthAdvisorConfig",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "init",
        "parameterTypes": []
      }
    ],
    "queriedMethods": [
      {
        "name": "getAdvice",
        "parameterTypes": []
      },
      {
        "name": "getPointcut",
        "parameterTypes": []
      },
      {
        "name": "setBeanFactory",
        "parameterTypes": [
          "org.springframework.beans.factory.BeanFactory"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.annotation.SpanTagAnnotationHandler"
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.annotation.SpelTagValueExpressionResolver",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "resolve",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.circuitbreaker.TraceCircuitBreakerFactoryAspect",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.circuitbreaker.TraceReactiveCircuitBreakerFactoryAspect",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.kafka.TracingKafkaPropagatorGetter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "get",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.kafka.TracingKafkaPropagatorSetter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "set",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.messaging.MessageHeaderPropagatorGetter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "get",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      },
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.messaging.MessageHeaderPropagatorSetter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "set",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.messaging.TraceMessagingAspect",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.scheduling.TraceSchedulingAspect",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.security.SleuthSecuritySpan$SleuthSecurityEvent"
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.security.TracingSecurityContextChangedListener",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "securityContextChanged",
        "parameterTypes": [
          "org.springframework.security.core.context.SecurityContextChangedEvent"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.SkipPatternProvider",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.SpanFromContextRetriever",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.TraceHandlerAdapter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "java.lang.Object"
        ]
      },
      {
        "name": "supports",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.TraceWebFilter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "filter",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "org.springframework.web.server.WebFilterChain"
        ]
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.client.HttpClientBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.client.LazyTraceClientHttpRequestInterceptor"
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.client.TraceRestTemplateBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      },
      {
        "name": "postProcessBeforeInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.client.TraceRestTemplateCustomizer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "customize",
        "parameterTypes": [
          "org.springframework.web.client.RestTemplate"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.client.TraceWebClientBeanPostProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "postProcessAfterInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      },
      {
        "name": "postProcessBeforeInitialization",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.instrument.web.mvc.TracingClientHttpRequestInterceptor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "intercept",
        "parameterTypes": [
          "org.springframework.http.HttpRequest",
          "byte[]",
          "org.springframework.http.client.ClientHttpRequestExecution"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.internal.DefaultSpanNamer",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "name",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.internal.LazyBean"
  },
  {
    "name": "org.springframework.cloud.sleuth.internal.SleuthContextListener",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      },
      {
        "name": "supportsEventType",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.cloud.sleuth.propagation.Propagator",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.propagation.Propagator$Getter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.sleuth.propagation.Propagator$Setter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.cloud.util.random.CachedRandomPropertySourceEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.context.ApplicationContext"
  },
  {
    "name": "org.springframework.context.ApplicationContextAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.ApplicationEvent"
  },
  {
    "name": "org.springframework.context.ApplicationEventPublisher"
  },
  {
    "name": "org.springframework.context.ApplicationEventPublisherAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.ApplicationListener",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.ConfigurableApplicationContext"
  },
  {
    "name": "org.springframework.context.EmbeddedValueResolverAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.Lifecycle",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.LifecycleProcessor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.PayloadApplicationEvent"
  },
  {
    "name": "org.springframework.context.Phased",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.SmartLifecycle",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Bean",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "autowire",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.context.annotation.ComponentScan",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "basePackageClasses",
        "parameterTypes": []
      },
      {
        "name": "basePackages",
        "parameterTypes": []
      },
      {
        "name": "nameGenerator",
        "parameterTypes": []
      },
      {
        "name": "scopeResolver",
        "parameterTypes": []
      },
      {
        "name": "scopedProxy",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.context.annotation.Conditional",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.context.annotation.Configuration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.EnableAspectJAutoProxy",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Import",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.context.annotation.Lazy",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Primary",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Role",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Scope",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "proxyMode",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.context.event.ContextRefreshedEvent"
  },
  {
    "name": "org.springframework.context.event.ContextStoppedEvent"
  },
  {
    "name": "org.springframework.context.event.SmartApplicationListener",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.i18n.LocaleContext"
  },
  {
    "name": "org.springframework.context.support.AbstractApplicationContext"
  },
  {
    "name": "org.springframework.context.support.ApplicationObjectSupport",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getApplicationContext",
        "parameterTypes": []
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.context.support.DefaultLifecycleProcessor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "isRunning",
        "parameterTypes": []
      },
      {
        "name": "onClose",
        "parameterTypes": []
      },
      {
        "name": "onRefresh",
        "parameterTypes": []
      },
      {
        "name": "setBeanFactory",
        "parameterTypes": [
          "org.springframework.beans.factory.BeanFactory"
        ]
      },
      {
        "name": "start",
        "parameterTypes": []
      },
      {
        "name": "stop",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup"
  },
  {
    "name": "org.springframework.context.support.MessageSourceAccessor"
  },
  {
    "name": "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
  },
  {
    "name": "org.springframework.core.DecoratingProxy",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.core.MethodParameter"
  },
  {
    "name": "org.springframework.core.Ordered",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.core.ReactiveAdapter"
  },
  {
    "name": "org.springframework.core.ReactiveAdapterRegistry",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.core.ReactiveTypeDescriptor"
  },
  {
    "name": "org.springframework.core.ResolvableType"
  },
  {
    "name": "org.springframework.core.annotation.AliasFor",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "annotation",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.core.annotation.MergedAnnotation"
  },
  {
    "name": "org.springframework.core.annotation.MergedAnnotations$SearchStrategy"
  },
  {
    "name": "org.springframework.core.annotation.Order",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.core.convert.ConversionService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.core.convert.TypeDescriptor"
  },
  {
    "name": "org.springframework.core.convert.converter.Converter"
  },
  {
    "name": "org.springframework.core.convert.converter.ConverterFactory"
  },
  {
    "name": "org.springframework.core.convert.converter.ConverterRegistry",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.core.convert.converter.GenericConverter"
  },
  {
    "name": "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair"
  },
  {
    "name": "org.springframework.core.convert.support.ConfigurableConversionService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.core.convert.support.GenericConversionService",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "addConverter",
        "parameterTypes": [
          "java.lang.Class",
          "java.lang.Class",
          "org.springframework.core.convert.converter.Converter"
        ]
      },
      {
        "name": "addConverter",
        "parameterTypes": [
          "org.springframework.core.convert.converter.Converter"
        ]
      },
      {
        "name": "addConverter",
        "parameterTypes": [
          "org.springframework.core.convert.converter.GenericConverter"
        ]
      },
      {
        "name": "addConverterFactory",
        "parameterTypes": [
          "org.springframework.core.convert.converter.ConverterFactory"
        ]
      },
      {
        "name": "canBypassConvert",
        "parameterTypes": [
          "org.springframework.core.convert.TypeDescriptor",
          "org.springframework.core.convert.TypeDescriptor"
        ]
      },
      {
        "name": "canConvert",
        "parameterTypes": [
          "java.lang.Class",
          "java.lang.Class"
        ]
      },
      {
        "name": "canConvert",
        "parameterTypes": [
          "org.springframework.core.convert.TypeDescriptor",
          "org.springframework.core.convert.TypeDescriptor"
        ]
      },
      {
        "name": "convert",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Class"
        ]
      },
      {
        "name": "convert",
        "parameterTypes": [
          "java.lang.Object",
          "org.springframework.core.convert.TypeDescriptor"
        ]
      },
      {
        "name": "convert",
        "parameterTypes": [
          "java.lang.Object",
          "org.springframework.core.convert.TypeDescriptor",
          "org.springframework.core.convert.TypeDescriptor"
        ]
      },
      {
        "name": "removeConvertible",
        "parameterTypes": [
          "java.lang.Class",
          "java.lang.Class"
        ]
      },
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.core.env.ConfigurableEnvironment"
  },
  {
    "name": "org.springframework.core.env.Environment",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "acceptsProfiles",
        "parameterTypes": [
          "org.springframework.core.env.Profiles"
        ]
      },
      {
        "name": "acceptsProfiles",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      },
      {
        "name": "getActiveProfiles",
        "parameterTypes": []
      },
      {
        "name": "getDefaultProfiles",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.core.env.Profiles"
  },
  {
    "name": "org.springframework.core.env.ProfilesParser",
    "allDeclaredClasses": true
  },
  {
    "name": "org.springframework.core.env.ProfilesParser$ParsedProfiles",
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.core.env.PropertyResolver",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "containsProperty",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getProperty",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getProperty",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Class"
        ]
      },
      {
        "name": "getProperty",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Class",
          "java.lang.Object"
        ]
      },
      {
        "name": "getProperty",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "getRequiredProperty",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getRequiredProperty",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Class"
        ]
      },
      {
        "name": "resolvePlaceholders",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "resolveRequiredPlaceholders",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.core.io.Resource",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "setIgnoreResourceNotFound",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setLocations",
        "parameterTypes": [
          "org.springframework.core.io.Resource[]"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.core.log.LogAccessor"
  },
  {
    "name": "org.springframework.core.task.AsyncListenableTaskExecutor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.core.task.AsyncTaskExecutor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.core.task.TaskDecorator"
  },
  {
    "name": "org.springframework.core.task.TaskExecutor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"
  },
  {
    "name": "org.springframework.data.annotation.Id",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.annotation.Persistent",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.annotation.QueryAnnotation",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.convert.CustomConversions",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.convert.CustomConversions$ConverterRegistration"
  },
  {
    "name": "org.springframework.data.convert.CustomConversions$ConverterRegistrationIntent"
  },
  {
    "name": "org.springframework.data.convert.CustomConversions$StoreConversions"
  },
  {
    "name": "org.springframework.data.convert.EntityConverter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.convert.EntityReader",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.convert.EntityWriter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.domain.Page"
  },
  {
    "name": "org.springframework.data.domain.Pageable"
  },
  {
    "name": "org.springframework.data.domain.Sort"
  },
  {
    "name": "org.springframework.data.elasticsearch.NoSuchIndexException"
  },
  {
    "name": "org.springframework.data.elasticsearch.annotations.Document",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "dynamic",
        "parameterTypes": []
      },
      {
        "name": "versionType",
        "parameterTypes": []
      },
      {
        "name": "writeTypeHint",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.elasticsearch.annotations.Field",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "dynamic",
        "parameterTypes": []
      },
      {
        "name": "format",
        "parameterTypes": []
      },
      {
        "name": "indexOptions",
        "parameterTypes": []
      },
      {
        "name": "name",
        "parameterTypes": []
      },
      {
        "name": "nullValueType",
        "parameterTypes": []
      },
      {
        "name": "pattern",
        "parameterTypes": []
      },
      {
        "name": "similarity",
        "parameterTypes": []
      },
      {
        "name": "storeNullValue",
        "parameterTypes": []
      },
      {
        "name": "termVector",
        "parameterTypes": []
      },
      {
        "name": "type",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.elasticsearch.annotations.Query",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.client.ClientConfiguration",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.client.ClientConfiguration$ClientConfigurationBuilderWithRequiredEndpoint"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.ClientConfiguration$MaybeSecureClientConfigurationBuilder"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.ClientConfiguration$TerminalClientConfigurationBuilder"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.DefaultClientConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getClientConfigurers",
        "parameterTypes": []
      },
      {
        "name": "getConnectTimeout",
        "parameterTypes": []
      },
      {
        "name": "getDefaultHeaders",
        "parameterTypes": []
      },
      {
        "name": "getEndpoints",
        "parameterTypes": []
      },
      {
        "name": "getHeadersSupplier",
        "parameterTypes": []
      },
      {
        "name": "getHostNameVerifier",
        "parameterTypes": []
      },
      {
        "name": "getHttpClientConfigurer",
        "parameterTypes": []
      },
      {
        "name": "getPathPrefix",
        "parameterTypes": []
      },
      {
        "name": "getProxy",
        "parameterTypes": []
      },
      {
        "name": "getSocketTimeout",
        "parameterTypes": []
      },
      {
        "name": "getSslContext",
        "parameterTypes": []
      },
      {
        "name": "getWebClientConfigurer",
        "parameterTypes": []
      },
      {
        "name": "useSsl",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.elasticsearch.client.NoReachableHostException"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.DefaultReactiveElasticsearchClient",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "aggregate",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.search.SearchRequest"
        ]
      },
      {
        "name": "bulk",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.bulk.BulkRequest"
        ]
      },
      {
        "name": "closeIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.close.CloseIndexRequest"
        ]
      },
      {
        "name": "cluster",
        "parameterTypes": []
      },
      {
        "name": "count",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.search.SearchRequest"
        ]
      },
      {
        "name": "createIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.create.CreateIndexRequest"
        ]
      },
      {
        "name": "createIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.client.indices.CreateIndexRequest"
        ]
      },
      {
        "name": "delete",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.delete.DeleteRequest"
        ]
      },
      {
        "name": "deleteBy",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.index.reindex.DeleteByQueryRequest"
        ]
      },
      {
        "name": "deleteIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest"
        ]
      },
      {
        "name": "deleteTemplate",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.template.delete.DeleteIndexTemplateRequest"
        ]
      },
      {
        "name": "execute",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient$ReactiveElasticsearchClientCallback"
        ]
      },
      {
        "name": "exists",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.get.GetRequest"
        ]
      },
      {
        "name": "existsIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.get.GetIndexRequest"
        ]
      },
      {
        "name": "existsIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.client.indices.GetIndexRequest"
        ]
      },
      {
        "name": "existsTemplate",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.client.indices.IndexTemplatesExistRequest"
        ]
      },
      {
        "name": "flushIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.flush.FlushRequest"
        ]
      },
      {
        "name": "get",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.get.GetRequest"
        ]
      },
      {
        "name": "getAliases",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.alias.get.GetAliasesRequest"
        ]
      },
      {
        "name": "getFieldMapping",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.client.indices.GetFieldMappingsRequest"
        ]
      },
      {
        "name": "getIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.client.indices.GetIndexRequest"
        ]
      },
      {
        "name": "getMapping",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequest"
        ]
      },
      {
        "name": "getMapping",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.client.indices.GetMappingsRequest"
        ]
      },
      {
        "name": "getSettings",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest"
        ]
      },
      {
        "name": "getTemplate",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.client.indices.GetIndexTemplatesRequest"
        ]
      },
      {
        "name": "health",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest"
        ]
      },
      {
        "name": "index",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.index.IndexRequest"
        ]
      },
      {
        "name": "indices",
        "parameterTypes": []
      },
      {
        "name": "info",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders"
        ]
      },
      {
        "name": "multiGet",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.get.MultiGetRequest"
        ]
      },
      {
        "name": "openIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.open.OpenIndexRequest"
        ]
      },
      {
        "name": "ping",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders"
        ]
      },
      {
        "name": "putMapping",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest"
        ]
      },
      {
        "name": "putMapping",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.client.indices.PutMappingRequest"
        ]
      },
      {
        "name": "putTemplate",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.client.indices.PutIndexTemplateRequest"
        ]
      },
      {
        "name": "refreshIndex",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.refresh.RefreshRequest"
        ]
      },
      {
        "name": "scroll",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.search.SearchRequest"
        ]
      },
      {
        "name": "search",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.search.SearchRequest"
        ]
      },
      {
        "name": "searchForResponse",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.search.SearchRequest"
        ]
      },
      {
        "name": "searchTemplate",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.script.mustache.SearchTemplateRequest"
        ]
      },
      {
        "name": "status",
        "parameterTypes": []
      },
      {
        "name": "suggest",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.search.SearchRequest"
        ]
      },
      {
        "name": "update",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.update.UpdateRequest"
        ]
      },
      {
        "name": "updateAliases",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest"
        ]
      },
      {
        "name": "updateBy",
        "parameterTypes": [
          "org.springframework.http.HttpHeaders",
          "org.elasticsearch.index.reindex.UpdateByQueryRequest"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.HostProvider$ClusterInformation"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.RawActionResponse"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient$Cluster",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient$Indices",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient$ReactiveElasticsearchClientCallback"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient$Status"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.RequestCreator"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.reactive.WebClientProvider"
  },
  {
    "name": "org.springframework.data.elasticsearch.client.util.ScrollState"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.AbstractElasticsearchRestTransportTemplate",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.AbstractElasticsearchTemplate",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.AbstractElasticsearchTemplate$DocumentCallback"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.DocumentOperations",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ElasticsearchOperations",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate$ClientCallback"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.EntityOperations$AdaptibleEntity"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.IndexOperations"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.IndexedObjectInformation"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.MultiGetItem"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveDocumentOperations",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveElasticsearchOperations",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveElasticsearchOperations$ClientCallback"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveElasticsearchOperations$ClusterClientCallback"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveElasticsearchOperations$IndicesClientCallback"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveElasticsearchTemplate",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "aggregate",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class"
        ]
      },
      {
        "name": "aggregate",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "bulkUpdate",
        "parameterTypes": [
          "java.util.List",
          "org.springframework.data.elasticsearch.core.query.BulkOptions",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "cluster",
        "parameterTypes": []
      },
      {
        "name": "count",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class"
        ]
      },
      {
        "name": "count",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "delete",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "delete",
        "parameterTypes": [
          "java.lang.Object",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "delete",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Class"
        ]
      },
      {
        "name": "delete",
        "parameterTypes": [
          "java.lang.String",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "delete",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class"
        ]
      },
      {
        "name": "delete",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "execute",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.ReactiveElasticsearchOperations$ClientCallback"
        ]
      },
      {
        "name": "executeWithClusterClient",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.ReactiveElasticsearchOperations$ClusterClientCallback"
        ]
      },
      {
        "name": "executeWithIndicesClient",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.ReactiveElasticsearchOperations$IndicesClientCallback"
        ]
      },
      {
        "name": "exists",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Class"
        ]
      },
      {
        "name": "exists",
        "parameterTypes": [
          "java.lang.String",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "get",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Class"
        ]
      },
      {
        "name": "get",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Class",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "getElasticsearchConverter",
        "parameterTypes": []
      },
      {
        "name": "getIndexCoordinatesFor",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "getPersistentEntityFor",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "idsQuery",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "indexOps",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "indexOps",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "matchAllQuery",
        "parameterTypes": []
      },
      {
        "name": "multiGet",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class"
        ]
      },
      {
        "name": "multiGet",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "save",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "save",
        "parameterTypes": [
          "java.lang.Object",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "saveAll",
        "parameterTypes": [
          "reactor.core.publisher.Mono",
          "java.lang.Class"
        ]
      },
      {
        "name": "saveAll",
        "parameterTypes": [
          "reactor.core.publisher.Mono",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "search",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class",
          "java.lang.Class"
        ]
      },
      {
        "name": "search",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class",
          "java.lang.Class",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "searchForPage",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class",
          "java.lang.Class"
        ]
      },
      {
        "name": "searchForPage",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class",
          "java.lang.Class",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      },
      {
        "name": "suggest",
        "parameterTypes": [
          "org.elasticsearch.search.suggest.SuggestBuilder",
          "java.lang.Class"
        ]
      },
      {
        "name": "suggest",
        "parameterTypes": [
          "org.elasticsearch.search.suggest.SuggestBuilder",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "suggest",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class"
        ]
      },
      {
        "name": "suggest",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.Query",
          "java.lang.Class",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "update",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.UpdateQuery",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "updateByQuery",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.query.UpdateQuery",
          "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
        ]
      },
      {
        "name": "withRouting",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.routing.RoutingResolver"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveElasticsearchTemplate$DocumentCallback"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveElasticsearchTemplate$Entities"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveElasticsearchTemplate$SearchDocumentCallback"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveIndexOperations"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.ReactiveSearchOperations",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.RefreshPolicy"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.RequestFactory"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.SearchHit"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.SearchHits"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.SearchHitsIterator"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.SearchOperations",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.SearchPage"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.SearchScrollHits"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.cluster.ClusterOperations"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.cluster.ReactiveClusterOperations"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.convert.ElasticsearchCustomConversions",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.convert.MappingElasticsearchConverter",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.document.Document",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.document.MapDocument",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.document.SearchDocument"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.document.SearchDocumentResponse"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.event.AfterConvertCallback",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.event.AfterSaveCallback",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.event.BeforeConvertCallback",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.mapping.ElasticsearchPersistentEntity"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.mapping.ElasticsearchPersistentProperty"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.mapping.IndexCoordinates"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.mapping.PropertyValueConverter"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchPersistentEntity"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.BulkOptions"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.ByQueryResponse"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.Criteria"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.Criteria$CriteriaEntry"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.CriteriaQuery"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.IndexQuery"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.MoreLikeThisQuery"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.Query"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.SeqNoPrimaryTerm"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.UpdateQuery"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.query.UpdateResponse"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.routing.RoutingResolver"
  },
  {
    "name": "org.springframework.data.elasticsearch.core.suggest.response.Suggest"
  },
  {
    "name": "org.springframework.data.elasticsearch.repository.ElasticsearchRepository",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.elasticsearch.repository.support.ElasticsearchRepositoryFactoryBean",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "setElasticsearchOperations",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.core.ElasticsearchOperations"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.elasticsearch.repository.support.SimpleElasticsearchRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.elasticsearch.repository.support.ElasticsearchEntityInformation",
          "org.springframework.data.elasticsearch.core.ElasticsearchOperations"
        ]
      },
      {
        "name": "count",
        "parameterTypes": []
      },
      {
        "name": "delete",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "deleteAll",
        "parameterTypes": []
      },
      {
        "name": "findAll",
        "parameterTypes": [
          "org.springframework.data.domain.Sort"
        ]
      },
      {
        "name": "findAllById",
        "parameterTypes": [
          "java.lang.Iterable"
        ]
      },
      {
        "name": "findById",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "saveAll",
        "parameterTypes": [
          "java.lang.Iterable"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.elasticsearch.support.StringObjectMap",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.mapping.MappingException"
  },
  {
    "name": "org.springframework.data.mapping.PersistentEntity"
  },
  {
    "name": "org.springframework.data.mapping.PersistentProperty"
  },
  {
    "name": "org.springframework.data.mapping.PersistentPropertyAccessor"
  },
  {
    "name": "org.springframework.data.mapping.PersistentPropertyPath"
  },
  {
    "name": "org.springframework.data.mapping.PersistentPropertyPaths"
  },
  {
    "name": "org.springframework.data.mapping.PropertyPath"
  },
  {
    "name": "org.springframework.data.mapping.callback.EntityCallback",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.mapping.callback.EntityCallbacks"
  },
  {
    "name": "org.springframework.data.mapping.callback.ReactiveEntityCallbacks"
  },
  {
    "name": "org.springframework.data.mapping.context.AbstractMappingContext",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.mapping.context.MappingContext",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.mapping.model.ClassGeneratingEntityInstantiator$ObjectInstantiator"
  },
  {
    "name": "org.springframework.data.mapping.model.FieldNamingStrategy"
  },
  {
    "name": "org.springframework.data.mapping.model.MutablePersistentEntity"
  },
  {
    "name": "org.springframework.data.mapping.model.Property"
  },
  {
    "name": "org.springframework.data.mapping.model.SimpleTypeHolder"
  },
  {
    "name": "org.springframework.data.projection.ProjectionFactory"
  },
  {
    "name": "org.springframework.data.querydsl.QuerydslPredicateExecutor"
  },
  {
    "name": "org.springframework.data.querydsl.ReactiveQuerydslPredicateExecutor"
  },
  {
    "name": "org.springframework.data.repository.CrudRepository",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "count",
        "parameterTypes": []
      },
      {
        "name": "deleteAll",
        "parameterTypes": []
      },
      {
        "name": "findAllById",
        "parameterTypes": [
          "java.lang.Iterable"
        ]
      },
      {
        "name": "findById",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "saveAll",
        "parameterTypes": [
          "java.lang.Iterable"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.NoRepositoryBean",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.repository.PagingAndSortingRepository",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.repository.Repository",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.repository.core.EntityInformation"
  },
  {
    "name": "org.springframework.data.repository.core.NamedQueries",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.repository.core.RepositoryInformation"
  },
  {
    "name": "org.springframework.data.repository.core.support.MethodLookup"
  },
  {
    "name": "org.springframework.data.repository.core.support.MethodLookup$InvokedMethod"
  },
  {
    "name": "org.springframework.data.repository.core.support.MethodLookup$MethodPredicate"
  },
  {
    "name": "org.springframework.data.repository.core.support.PropertiesBasedNamedQueries",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.util.Properties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "empty",
        "parameterTypes": []
      },
      {
        "name": "equals",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hashCode",
        "parameterTypes": []
      },
      {
        "name": "iterator",
        "parameterTypes": []
      },
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "setLazyInit",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setNamedQueries",
        "parameterTypes": [
          "org.springframework.data.repository.core.NamedQueries"
        ]
      },
      {
        "name": "setQueryLookupStrategyKey",
        "parameterTypes": [
          "org.springframework.data.repository.query.QueryLookupStrategy$Key"
        ]
      },
      {
        "name": "setRepositoryFragments",
        "parameterTypes": [
          "org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryFactoryCustomizer"
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryFactoryInformation",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryFactorySupport"
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryFragment"
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryInvocationMulticaster"
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryMethodInvocationListener",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryMethodInvocationListener$RepositoryMethodInvocation"
  },
  {
    "name": "org.springframework.data.repository.query.QueryByExampleExecutor"
  },
  {
    "name": "org.springframework.data.repository.query.QueryLookupStrategy$Key",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.repository.query.QueryMethodEvaluationContextProvider"
  },
  {
    "name": "org.springframework.data.repository.query.ReactiveQueryByExampleExecutor"
  },
  {
    "name": "org.springframework.data.util.Lazy"
  },
  {
    "name": "org.springframework.data.util.Streamable",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.util.TypeInformation"
  },
  {
    "name": "org.springframework.format.AnnotationFormatterFactory"
  },
  {
    "name": "org.springframework.format.Formatter"
  },
  {
    "name": "org.springframework.format.FormatterRegistry",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.format.Parser"
  },
  {
    "name": "org.springframework.format.Printer"
  },
  {
    "name": "org.springframework.format.support.DefaultFormattingConversionService",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "addDefaultFormatters",
        "parameterTypes": [
          "org.springframework.format.FormatterRegistry"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.format.support.FormattingConversionService",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "addFormatter",
        "parameterTypes": [
          "org.springframework.format.Formatter"
        ]
      },
      {
        "name": "addFormatterForFieldAnnotation",
        "parameterTypes": [
          "org.springframework.format.AnnotationFormatterFactory"
        ]
      },
      {
        "name": "addFormatterForFieldType",
        "parameterTypes": [
          "java.lang.Class",
          "org.springframework.format.Formatter"
        ]
      },
      {
        "name": "addFormatterForFieldType",
        "parameterTypes": [
          "java.lang.Class",
          "org.springframework.format.Printer",
          "org.springframework.format.Parser"
        ]
      },
      {
        "name": "addParser",
        "parameterTypes": [
          "org.springframework.format.Parser"
        ]
      },
      {
        "name": "addPrinter",
        "parameterTypes": [
          "org.springframework.format.Printer"
        ]
      },
      {
        "name": "setEmbeddedValueResolver",
        "parameterTypes": [
          "org.springframework.util.StringValueResolver"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.http.HttpHeaders"
  },
  {
    "name": "org.springframework.http.HttpMethod"
  },
  {
    "name": "org.springframework.http.HttpRequest"
  },
  {
    "name": "org.springframework.http.HttpStatus"
  },
  {
    "name": "org.springframework.http.MediaType"
  },
  {
    "name": "org.springframework.http.ResponseCookie"
  },
  {
    "name": "org.springframework.http.ResponseCookie$ResponseCookieBuilder"
  },
  {
    "name": "org.springframework.http.client.ClientHttpRequestExecution"
  },
  {
    "name": "org.springframework.http.client.ClientHttpRequestInterceptor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.http.client.ClientHttpResponse"
  },
  {
    "name": "org.springframework.http.client.HttpComponentsClientHttpRequestFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.http.client.reactive.ClientHttpConnector"
  },
  {
    "name": "org.springframework.http.client.reactive.ReactorClientHttpConnector"
  },
  {
    "name": "org.springframework.http.client.reactive.ReactorResourceFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      },
      {
        "name": "destroy",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.http.codec.ClientCodecConfigurer"
  },
  {
    "name": "org.springframework.http.codec.CodecConfigurer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.http.codec.CodecConfigurer$CustomCodecs"
  },
  {
    "name": "org.springframework.http.codec.HttpMessageReader"
  },
  {
    "name": "org.springframework.http.codec.ServerCodecConfigurer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.http.codec.ServerCodecConfigurer$ServerDefaultCodecs"
  },
  {
    "name": "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader"
  },
  {
    "name": "org.springframework.http.codec.support.BaseCodecConfigurer",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.http.codec.support.BaseDefaultCodecs"
  },
  {
    "name": "org.springframework.http.codec.support.DefaultClientCodecConfigurer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.http.codec.support.DefaultServerCodecConfigurer",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ],
    "queriedMethods": [
      {
        "name": "clone",
        "parameterTypes": []
      },
      {
        "name": "customCodecs",
        "parameterTypes": []
      },
      {
        "name": "defaultCodecs",
        "parameterTypes": []
      },
      {
        "name": "getReaders",
        "parameterTypes": []
      },
      {
        "name": "getWriters",
        "parameterTypes": []
      },
      {
        "name": "registerDefaults",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.http.server.PathContainer"
  },
  {
    "name": "org.springframework.http.server.reactive.HttpHandler",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.http.server.reactive.ReactorHttpHandlerAdapter"
  },
  {
    "name": "org.springframework.http.server.reactive.ServerHttpRequest"
  },
  {
    "name": "org.springframework.http.server.reactive.ServerHttpResponse"
  },
  {
    "name": "org.springframework.jmx.export.annotation.ManagedAttribute",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.jmx.export.annotation.ManagedOperation",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.jmx.export.annotation.ManagedResource",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.kafka.annotation.EnableKafka",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.kafka.annotation.KafkaListener",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.kafka.annotation.PartitionOffset",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.kafka.annotation.TopicPartition",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.kafka.config.AbstractKafkaListenerContainerFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      },
      {
        "name": "createContainer",
        "parameterTypes": [
          "java.util.regex.Pattern"
        ]
      },
      {
        "name": "createContainer",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      },
      {
        "name": "createContainer",
        "parameterTypes": [
          "org.springframework.kafka.support.TopicPartitionOffset[]"
        ]
      },
      {
        "name": "createListenerContainer",
        "parameterTypes": [
          "org.springframework.kafka.config.KafkaListenerEndpoint"
        ]
      },
      {
        "name": "getConsumerFactory",
        "parameterTypes": []
      },
      {
        "name": "getContainerProperties",
        "parameterTypes": []
      },
      {
        "name": "isBatchListener",
        "parameterTypes": []
      },
      {
        "name": "setAckDiscarded",
        "parameterTypes": [
          "java.lang.Boolean"
        ]
      },
      {
        "name": "setAfterRollbackProcessor",
        "parameterTypes": [
          "org.springframework.kafka.listener.AfterRollbackProcessor"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      },
      {
        "name": "setApplicationEventPublisher",
        "parameterTypes": [
          "org.springframework.context.ApplicationEventPublisher"
        ]
      },
      {
        "name": "setAutoStartup",
        "parameterTypes": [
          "java.lang.Boolean"
        ]
      },
      {
        "name": "setBatchErrorHandler",
        "parameterTypes": [
          "org.springframework.kafka.listener.BatchErrorHandler"
        ]
      },
      {
        "name": "setBatchInterceptor",
        "parameterTypes": [
          "org.springframework.kafka.listener.BatchInterceptor"
        ]
      },
      {
        "name": "setBatchListener",
        "parameterTypes": [
          "java.lang.Boolean"
        ]
      },
      {
        "name": "setBatchToRecordAdapter",
        "parameterTypes": [
          "org.springframework.kafka.listener.adapter.BatchToRecordAdapter"
        ]
      },
      {
        "name": "setCommonErrorHandler",
        "parameterTypes": [
          "org.springframework.kafka.listener.CommonErrorHandler"
        ]
      },
      {
        "name": "setConsumerFactory",
        "parameterTypes": [
          "org.springframework.kafka.core.ConsumerFactory"
        ]
      },
      {
        "name": "setContainerCustomizer",
        "parameterTypes": [
          "org.springframework.kafka.config.ContainerCustomizer"
        ]
      },
      {
        "name": "setErrorHandler",
        "parameterTypes": [
          "org.springframework.kafka.listener.ErrorHandler"
        ]
      },
      {
        "name": "setMessageConverter",
        "parameterTypes": [
          "org.springframework.kafka.support.converter.MessageConverter"
        ]
      },
      {
        "name": "setMissingTopicsFatal",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setPhase",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setRecordFilterStrategy",
        "parameterTypes": [
          "org.springframework.kafka.listener.adapter.RecordFilterStrategy"
        ]
      },
      {
        "name": "setRecordInterceptor",
        "parameterTypes": [
          "org.springframework.kafka.listener.RecordInterceptor"
        ]
      },
      {
        "name": "setRecoveryCallback",
        "parameterTypes": [
          "org.springframework.retry.RecoveryCallback"
        ]
      },
      {
        "name": "setReplyHeadersConfigurer",
        "parameterTypes": [
          "org.springframework.kafka.listener.adapter.ReplyHeadersConfigurer"
        ]
      },
      {
        "name": "setReplyTemplate",
        "parameterTypes": [
          "org.springframework.kafka.core.KafkaTemplate"
        ]
      },
      {
        "name": "setRetryTemplate",
        "parameterTypes": [
          "org.springframework.retry.support.RetryTemplate"
        ]
      },
      {
        "name": "setStatefulRetry",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.config.AbstractKafkaListenerEndpoint"
  },
  {
    "name": "org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.kafka.config.ContainerCustomizer"
  },
  {
    "name": "org.springframework.kafka.config.KafkaListenerContainerFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.kafka.config.KafkaListenerEndpoint"
  },
  {
    "name": "org.springframework.kafka.config.KafkaListenerEndpointRegistry",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "destroy",
        "parameterTypes": []
      },
      {
        "name": "getAllListenerContainers",
        "parameterTypes": []
      },
      {
        "name": "getListenerContainer",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getListenerContainerIds",
        "parameterTypes": []
      },
      {
        "name": "getListenerContainers",
        "parameterTypes": []
      },
      {
        "name": "getPhase",
        "parameterTypes": []
      },
      {
        "name": "isAutoStartup",
        "parameterTypes": []
      },
      {
        "name": "isRunning",
        "parameterTypes": []
      },
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      },
      {
        "name": "start",
        "parameterTypes": []
      },
      {
        "name": "stop",
        "parameterTypes": []
      },
      {
        "name": "stop",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.config.StreamsBuilderFactoryBean"
  },
  {
    "name": "org.springframework.kafka.core.ConsumerFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.kafka.core.ConsumerFactory$Listener"
  },
  {
    "name": "org.springframework.kafka.core.ConsumerPostProcessor"
  },
  {
    "name": "org.springframework.kafka.core.DefaultKafkaConsumerFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "addListener",
        "parameterTypes": [
          "int",
          "org.springframework.kafka.core.ConsumerFactory$Listener"
        ]
      },
      {
        "name": "addListener",
        "parameterTypes": [
          "org.springframework.kafka.core.ConsumerFactory$Listener"
        ]
      },
      {
        "name": "addPostProcessor",
        "parameterTypes": [
          "org.springframework.kafka.core.ConsumerPostProcessor"
        ]
      },
      {
        "name": "createConsumer",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "createConsumer",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "java.util.Properties"
        ]
      },
      {
        "name": "getConfigurationProperties",
        "parameterTypes": []
      },
      {
        "name": "getKeyDeserializer",
        "parameterTypes": []
      },
      {
        "name": "getListeners",
        "parameterTypes": []
      },
      {
        "name": "getPostProcessors",
        "parameterTypes": []
      },
      {
        "name": "getValueDeserializer",
        "parameterTypes": []
      },
      {
        "name": "isAutoCommit",
        "parameterTypes": []
      },
      {
        "name": "removeConfig",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "removeListener",
        "parameterTypes": [
          "org.springframework.kafka.core.ConsumerFactory$Listener"
        ]
      },
      {
        "name": "removePostProcessor",
        "parameterTypes": [
          "org.springframework.kafka.core.ConsumerPostProcessor"
        ]
      },
      {
        "name": "setBeanName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "updateConfigs",
        "parameterTypes": [
          "java.util.Map"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.core.DefaultKafkaProducerFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "addListener",
        "parameterTypes": [
          "int",
          "org.springframework.kafka.core.ProducerFactory$Listener"
        ]
      },
      {
        "name": "addListener",
        "parameterTypes": [
          "org.springframework.kafka.core.ProducerFactory$Listener"
        ]
      },
      {
        "name": "addPostProcessor",
        "parameterTypes": [
          "org.springframework.kafka.core.ProducerPostProcessor"
        ]
      },
      {
        "name": "closeProducerFor",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "closeThreadBoundProducer",
        "parameterTypes": []
      },
      {
        "name": "copyWithConfigurationOverride",
        "parameterTypes": [
          "java.util.Map"
        ]
      },
      {
        "name": "createNonTransactionalProducer",
        "parameterTypes": []
      },
      {
        "name": "createProducer",
        "parameterTypes": []
      },
      {
        "name": "createProducer",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "destroy",
        "parameterTypes": []
      },
      {
        "name": "getConfigurationProperties",
        "parameterTypes": []
      },
      {
        "name": "getKeySerializer",
        "parameterTypes": []
      },
      {
        "name": "getKeySerializerSupplier",
        "parameterTypes": []
      },
      {
        "name": "getListeners",
        "parameterTypes": []
      },
      {
        "name": "getPhysicalCloseTimeout",
        "parameterTypes": []
      },
      {
        "name": "getPostProcessors",
        "parameterTypes": []
      },
      {
        "name": "getTransactionIdPrefix",
        "parameterTypes": []
      },
      {
        "name": "getValueSerializer",
        "parameterTypes": []
      },
      {
        "name": "getValueSerializerSupplier",
        "parameterTypes": []
      },
      {
        "name": "isProducerPerConsumerPartition",
        "parameterTypes": []
      },
      {
        "name": "isProducerPerThread",
        "parameterTypes": []
      },
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      },
      {
        "name": "removeConfig",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "removeListener",
        "parameterTypes": [
          "org.springframework.kafka.core.ProducerFactory$Listener"
        ]
      },
      {
        "name": "removePostProcessor",
        "parameterTypes": [
          "org.springframework.kafka.core.ProducerPostProcessor"
        ]
      },
      {
        "name": "reset",
        "parameterTypes": []
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      },
      {
        "name": "setBeanName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "transactionCapable",
        "parameterTypes": []
      },
      {
        "name": "updateConfigs",
        "parameterTypes": [
          "java.util.Map"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer"
  },
  {
    "name": "org.springframework.kafka.core.KafkaAdmin",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterSingletonsInstantiated",
        "parameterTypes": []
      },
      {
        "name": "createOrModifyTopics",
        "parameterTypes": [
          "org.apache.kafka.clients.admin.NewTopic[]"
        ]
      },
      {
        "name": "describeTopics",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      },
      {
        "name": "getConfigurationProperties",
        "parameterTypes": []
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.core.KafkaAdmin$NewTopics"
  },
  {
    "name": "org.springframework.kafka.core.KafkaAdminOperations",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.kafka.core.KafkaOperations",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.kafka.core.KafkaOperations$OperationsCallback"
  },
  {
    "name": "org.springframework.kafka.core.KafkaOperations$ProducerCallback"
  },
  {
    "name": "org.springframework.kafka.core.KafkaResourceFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "setBootstrapServersSupplier",
        "parameterTypes": [
          "java.util.function.Supplier"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.core.KafkaTemplate",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "destroy",
        "parameterTypes": []
      },
      {
        "name": "execute",
        "parameterTypes": [
          "org.springframework.kafka.core.KafkaOperations$ProducerCallback"
        ]
      },
      {
        "name": "executeInTransaction",
        "parameterTypes": [
          "org.springframework.kafka.core.KafkaOperations$OperationsCallback"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": []
      },
      {
        "name": "getProducerFactory",
        "parameterTypes": []
      },
      {
        "name": "inTransaction",
        "parameterTypes": []
      },
      {
        "name": "isAllowNonTransactional",
        "parameterTypes": []
      },
      {
        "name": "isTransactional",
        "parameterTypes": []
      },
      {
        "name": "metrics",
        "parameterTypes": []
      },
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      },
      {
        "name": "partitionsFor",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "receive",
        "parameterTypes": [
          "java.lang.String",
          "int",
          "long",
          "java.time.Duration"
        ]
      },
      {
        "name": "receive",
        "parameterTypes": [
          "java.util.Collection",
          "java.time.Duration"
        ]
      },
      {
        "name": "send",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "send",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Integer",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "send",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Object"
        ]
      },
      {
        "name": "send",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "send",
        "parameterTypes": [
          "org.apache.kafka.clients.producer.ProducerRecord"
        ]
      },
      {
        "name": "send",
        "parameterTypes": [
          "org.springframework.messaging.Message"
        ]
      },
      {
        "name": "sendDefault",
        "parameterTypes": [
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "sendDefault",
        "parameterTypes": [
          "java.lang.Integer",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "sendDefault",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "sendDefault",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "sendOffsetsToTransaction",
        "parameterTypes": [
          "java.util.Map"
        ]
      },
      {
        "name": "sendOffsetsToTransaction",
        "parameterTypes": [
          "java.util.Map",
          "java.lang.String"
        ]
      },
      {
        "name": "sendOffsetsToTransaction",
        "parameterTypes": [
          "java.util.Map",
          "org.apache.kafka.clients.consumer.ConsumerGroupMetadata"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      },
      {
        "name": "setBeanName",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.core.ProducerFactory",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.kafka.core.ProducerFactory$Listener"
  },
  {
    "name": "org.springframework.kafka.core.ProducerPostProcessor"
  },
  {
    "name": "org.springframework.kafka.listener.AbstractMessageListenerContainer"
  },
  {
    "name": "org.springframework.kafka.listener.AfterRollbackProcessor"
  },
  {
    "name": "org.springframework.kafka.listener.BatchErrorHandler"
  },
  {
    "name": "org.springframework.kafka.listener.BatchInterceptor"
  },
  {
    "name": "org.springframework.kafka.listener.CommonErrorHandler"
  },
  {
    "name": "org.springframework.kafka.listener.ConcurrentMessageListenerContainer"
  },
  {
    "name": "org.springframework.kafka.listener.ConsumerAwareRebalanceListener"
  },
  {
    "name": "org.springframework.kafka.listener.ConsumerProperties",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "getAuthExceptionRetryInterval",
        "parameterTypes": []
      },
      {
        "name": "getAuthorizationExceptionRetryInterval",
        "parameterTypes": []
      },
      {
        "name": "getClientId",
        "parameterTypes": []
      },
      {
        "name": "getCommitCallback",
        "parameterTypes": []
      },
      {
        "name": "getCommitLogLevel",
        "parameterTypes": []
      },
      {
        "name": "getCommitRetries",
        "parameterTypes": []
      },
      {
        "name": "getConsumerRebalanceListener",
        "parameterTypes": []
      },
      {
        "name": "getGroupId",
        "parameterTypes": []
      },
      {
        "name": "getKafkaConsumerProperties",
        "parameterTypes": []
      },
      {
        "name": "getPollTimeout",
        "parameterTypes": []
      },
      {
        "name": "getSyncCommitTimeout",
        "parameterTypes": []
      },
      {
        "name": "isCheckDeserExWhenKeyNull",
        "parameterTypes": []
      },
      {
        "name": "isCheckDeserExWhenValueNull",
        "parameterTypes": []
      },
      {
        "name": "isFixTxOffsets",
        "parameterTypes": []
      },
      {
        "name": "isOnlyLogRecordMetadata",
        "parameterTypes": []
      },
      {
        "name": "isSyncCommits",
        "parameterTypes": []
      },
      {
        "name": "setAuthExceptionRetryInterval",
        "parameterTypes": [
          "java.time.Duration"
        ]
      },
      {
        "name": "setAuthorizationExceptionRetryInterval",
        "parameterTypes": [
          "java.time.Duration"
        ]
      },
      {
        "name": "setCheckDeserExWhenKeyNull",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setCheckDeserExWhenValueNull",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setClientId",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setCommitCallback",
        "parameterTypes": [
          "org.apache.kafka.clients.consumer.OffsetCommitCallback"
        ]
      },
      {
        "name": "setCommitLogLevel",
        "parameterTypes": [
          "org.springframework.kafka.support.LogIfLevelEnabled$Level"
        ]
      },
      {
        "name": "setCommitRetries",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setConsumerRebalanceListener",
        "parameterTypes": [
          "org.apache.kafka.clients.consumer.ConsumerRebalanceListener"
        ]
      },
      {
        "name": "setFixTxOffsets",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setGroupId",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setKafkaConsumerProperties",
        "parameterTypes": [
          "java.util.Properties"
        ]
      },
      {
        "name": "setOnlyLogRecordMetadata",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setPollTimeout",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setSyncCommits",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.listener.ContainerProperties",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "getAckMode",
        "parameterTypes": []
      },
      {
        "name": "getAdviceChain",
        "parameterTypes": []
      },
      {
        "name": "getAssignmentCommitOption",
        "parameterTypes": []
      },
      {
        "name": "getConsumerStartTimeout",
        "parameterTypes": []
      },
      {
        "name": "getConsumerStartTimout",
        "parameterTypes": []
      },
      {
        "name": "getConsumerTaskExecutor",
        "parameterTypes": []
      },
      {
        "name": "getEosMode",
        "parameterTypes": []
      },
      {
        "name": "getIdleBeforeDataMultiplier",
        "parameterTypes": []
      },
      {
        "name": "getIdleBetweenPolls",
        "parameterTypes": []
      },
      {
        "name": "getIdleEventInterval",
        "parameterTypes": []
      },
      {
        "name": "getIdlePartitionEventInterval",
        "parameterTypes": []
      },
      {
        "name": "getMessageListener",
        "parameterTypes": []
      },
      {
        "name": "getMicrometerTags",
        "parameterTypes": []
      },
      {
        "name": "getMonitorInterval",
        "parameterTypes": []
      },
      {
        "name": "getNoPollThreshold",
        "parameterTypes": []
      },
      {
        "name": "getScheduler",
        "parameterTypes": []
      },
      {
        "name": "getShutdownTimeout",
        "parameterTypes": []
      },
      {
        "name": "getTransactionDefinition",
        "parameterTypes": []
      },
      {
        "name": "getTransactionManager",
        "parameterTypes": []
      },
      {
        "name": "isAsyncAcks",
        "parameterTypes": []
      },
      {
        "name": "isDeliveryAttemptHeader",
        "parameterTypes": []
      },
      {
        "name": "isLogContainerConfig",
        "parameterTypes": []
      },
      {
        "name": "isMicrometerEnabled",
        "parameterTypes": []
      },
      {
        "name": "isMissingTopicsFatal",
        "parameterTypes": []
      },
      {
        "name": "isStopContainerWhenFenced",
        "parameterTypes": []
      },
      {
        "name": "isStopImmediate",
        "parameterTypes": []
      },
      {
        "name": "setAckMode",
        "parameterTypes": [
          "org.springframework.kafka.listener.ContainerProperties$AckMode"
        ]
      },
      {
        "name": "setAdviceChain",
        "parameterTypes": [
          "org.aopalliance.aop.Advice[]"
        ]
      },
      {
        "name": "setAssignmentCommitOption",
        "parameterTypes": [
          "org.springframework.kafka.listener.ContainerProperties$AssignmentCommitOption"
        ]
      },
      {
        "name": "setAsyncAcks",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setConsumerStartTimeout",
        "parameterTypes": [
          "java.time.Duration"
        ]
      },
      {
        "name": "setConsumerStartTimout",
        "parameterTypes": [
          "java.time.Duration"
        ]
      },
      {
        "name": "setConsumerTaskExecutor",
        "parameterTypes": [
          "org.springframework.core.task.AsyncListenableTaskExecutor"
        ]
      },
      {
        "name": "setDeliveryAttemptHeader",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setEosMode",
        "parameterTypes": [
          "org.springframework.kafka.listener.ContainerProperties$EOSMode"
        ]
      },
      {
        "name": "setIdleBeforeDataMultiplier",
        "parameterTypes": [
          "double"
        ]
      },
      {
        "name": "setIdleBetweenPolls",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setIdleEventInterval",
        "parameterTypes": [
          "java.lang.Long"
        ]
      },
      {
        "name": "setIdlePartitionEventInterval",
        "parameterTypes": [
          "java.lang.Long"
        ]
      },
      {
        "name": "setLogContainerConfig",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setMessageListener",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "setMicrometerEnabled",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setMicrometerTags",
        "parameterTypes": [
          "java.util.Map"
        ]
      },
      {
        "name": "setMissingTopicsFatal",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setMonitorInterval",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setNoPollThreshold",
        "parameterTypes": [
          "float"
        ]
      },
      {
        "name": "setScheduler",
        "parameterTypes": [
          "org.springframework.scheduling.TaskScheduler"
        ]
      },
      {
        "name": "setShutdownTimeout",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setStopContainerWhenFenced",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setStopImmediate",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setSyncCommitTimeout",
        "parameterTypes": [
          "java.time.Duration"
        ]
      },
      {
        "name": "setTransactionDefinition",
        "parameterTypes": [
          "org.springframework.transaction.TransactionDefinition"
        ]
      },
      {
        "name": "setTransactionManager",
        "parameterTypes": [
          "org.springframework.transaction.PlatformTransactionManager"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.listener.ErrorHandler"
  },
  {
    "name": "org.springframework.kafka.listener.ListenerContainerRegistry",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.kafka.listener.MessageListenerContainer"
  },
  {
    "name": "org.springframework.kafka.listener.RecordInterceptor"
  },
  {
    "name": "org.springframework.kafka.listener.adapter.BatchToRecordAdapter"
  },
  {
    "name": "org.springframework.kafka.listener.adapter.RecordFilterStrategy"
  },
  {
    "name": "org.springframework.kafka.listener.adapter.ReplyHeadersConfigurer"
  },
  {
    "name": "org.springframework.kafka.security.jaas.KafkaJaasLoginModuleInitializer"
  },
  {
    "name": "org.springframework.kafka.support.LoggingProducerListener",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "onError",
        "parameterTypes": [
          "org.apache.kafka.clients.producer.ProducerRecord",
          "org.apache.kafka.clients.producer.RecordMetadata",
          "java.lang.Exception"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.kafka.support.ProducerListener",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.kafka.support.TopicPartitionOffset"
  },
  {
    "name": "org.springframework.kafka.support.converter.BatchMessageConverter"
  },
  {
    "name": "org.springframework.kafka.support.converter.MessageConverter"
  },
  {
    "name": "org.springframework.kafka.support.converter.RecordMessageConverter"
  },
  {
    "name": "org.springframework.kafka.support.micrometer.MicrometerHolder"
  },
  {
    "name": "org.springframework.kafka.transaction.KafkaAwareTransactionManager"
  },
  {
    "name": "org.springframework.kafka.transaction.KafkaTransactionManager"
  },
  {
    "name": "org.springframework.lang.NonNull"
  },
  {
    "name": "org.springframework.lang.NonNullApi"
  },
  {
    "name": "org.springframework.lang.Nullable"
  },
  {
    "name": "org.springframework.messaging.Message"
  },
  {
    "name": "org.springframework.messaging.converter.SmartMessageConverter"
  },
  {
    "name": "org.springframework.messaging.handler.annotation.Header",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "defaultValue",
        "parameterTypes": []
      },
      {
        "name": "name",
        "parameterTypes": []
      },
      {
        "name": "required",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.messaging.handler.annotation.Headers",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.messaging.handler.annotation.MessageMapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.messaging.support.MessageHeaderAccessor"
  },
  {
    "name": "org.springframework.messaging.support.NativeMessageHeaderAccessor"
  },
  {
    "name": "org.springframework.nativex.ClassNotFoundExceptionNativeFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.nativex.GeneratedClassNotFoundExceptionFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.nativex.NoSuchMethodExceptionNativeFailureAnalyzer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.retry.RecoveryCallback"
  },
  {
    "name": "org.springframework.retry.support.RetryTemplate"
  },
  {
    "name": "org.springframework.scheduling.SchedulingTaskExecutor",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.scheduling.TaskScheduler",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.scheduling.Trigger"
  },
  {
    "name": "org.springframework.scheduling.annotation.EnableScheduling",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.scheduling.annotation.Scheduled",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "timeUnit",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.scheduling.annotation.Schedules",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.scheduling.annotation.SchedulingConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.scheduling.concurrent.CustomizableThreadFactory",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "newThread",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      },
      {
        "name": "destroy",
        "parameterTypes": []
      },
      {
        "name": "initialize",
        "parameterTypes": []
      },
      {
        "name": "setAwaitTerminationMillis",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setAwaitTerminationSeconds",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setBeanName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setRejectedExecutionHandler",
        "parameterTypes": [
          "java.util.concurrent.RejectedExecutionHandler"
        ]
      },
      {
        "name": "setThreadFactory",
        "parameterTypes": [
          "java.util.concurrent.ThreadFactory"
        ]
      },
      {
        "name": "setThreadNamePrefix",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setWaitForTasksToCompleteOnShutdown",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "shutdown",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "execute",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      },
      {
        "name": "execute",
        "parameterTypes": [
          "java.lang.Runnable",
          "long"
        ]
      },
      {
        "name": "submit",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      },
      {
        "name": "submit",
        "parameterTypes": [
          "java.util.concurrent.Callable"
        ]
      },
      {
        "name": "submitListenable",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      },
      {
        "name": "submitListenable",
        "parameterTypes": [
          "java.util.concurrent.Callable"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "execute",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      },
      {
        "name": "execute",
        "parameterTypes": [
          "java.lang.Runnable",
          "long"
        ]
      },
      {
        "name": "getClock",
        "parameterTypes": []
      },
      {
        "name": "schedule",
        "parameterTypes": [
          "java.lang.Runnable",
          "java.util.Date"
        ]
      },
      {
        "name": "schedule",
        "parameterTypes": [
          "java.lang.Runnable",
          "org.springframework.scheduling.Trigger"
        ]
      },
      {
        "name": "scheduleAtFixedRate",
        "parameterTypes": [
          "java.lang.Runnable",
          "long"
        ]
      },
      {
        "name": "scheduleAtFixedRate",
        "parameterTypes": [
          "java.lang.Runnable",
          "java.util.Date",
          "long"
        ]
      },
      {
        "name": "scheduleWithFixedDelay",
        "parameterTypes": [
          "java.lang.Runnable",
          "long"
        ]
      },
      {
        "name": "scheduleWithFixedDelay",
        "parameterTypes": [
          "java.lang.Runnable",
          "java.util.Date",
          "long"
        ]
      },
      {
        "name": "submit",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      },
      {
        "name": "submit",
        "parameterTypes": [
          "java.util.concurrent.Callable"
        ]
      },
      {
        "name": "submitListenable",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      },
      {
        "name": "submitListenable",
        "parameterTypes": [
          "java.util.concurrent.Callable"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.AuthenticationEventPublisher",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.security.authentication.DefaultAuthenticationEventPublisher",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "publishAuthenticationFailure",
        "parameterTypes": [
          "org.springframework.security.core.AuthenticationException",
          "org.springframework.security.core.Authentication"
        ]
      },
      {
        "name": "publishAuthenticationSuccess",
        "parameterTypes": [
          "org.springframework.security.core.Authentication"
        ]
      },
      {
        "name": "setApplicationEventPublisher",
        "parameterTypes": [
          "org.springframework.context.ApplicationEventPublisher"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureLockedEvent",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureProviderNotFoundEvent",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.core.Authentication"
  },
  {
    "name": "org.springframework.security.core.AuthenticationException"
  },
  {
    "name": "org.springframework.security.core.context.ReactiveSecurityContextHolder"
  },
  {
    "name": "org.springframework.security.core.context.SecurityContextChangedEvent"
  },
  {
    "name": "org.springframework.security.core.context.SecurityContextChangedListener",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.security.core.userdetails.MapReactiveUserDetailsService",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "findByUsername",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "updatePassword",
        "parameterTypes": [
          "org.springframework.security.core.userdetails.UserDetails",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.security.core.userdetails.ReactiveUserDetailsService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.security.core.userdetails.UserDetails"
  },
  {
    "name": "org.springframework.security.crypto.encrypt.TextEncryptor"
  },
  {
    "name": "org.springframework.security.crypto.password.PasswordEncoder"
  },
  {
    "name": "org.springframework.security.rsa.crypto.RsaSecretEncryptor"
  },
  {
    "name": "org.springframework.stereotype.Component",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.stereotype.Controller",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.stereotype.Indexed",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.stereotype.Repository",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.stereotype.Service",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.transaction.PlatformTransactionManager"
  },
  {
    "name": "org.springframework.transaction.ReactiveTransactionManager"
  },
  {
    "name": "org.springframework.transaction.TransactionDefinition",
    "allPublicFields": true
  },
  {
    "name": "org.springframework.transaction.interceptor.TransactionalProxy",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.transaction.reactive.TransactionalOperator"
  },
  {
    "name": "org.springframework.transaction.support.AbstractPlatformTransactionManager"
  },
  {
    "name": "org.springframework.ui.Model"
  },
  {
    "name": "org.springframework.util.Assert"
  },
  {
    "name": "org.springframework.util.CustomizableThreadCreator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "createThread",
        "parameterTypes": [
          "java.lang.Runnable"
        ]
      },
      {
        "name": "getThreadGroup",
        "parameterTypes": []
      },
      {
        "name": "getThreadNamePrefix",
        "parameterTypes": []
      },
      {
        "name": "getThreadPriority",
        "parameterTypes": []
      },
      {
        "name": "isDaemon",
        "parameterTypes": []
      },
      {
        "name": "setDaemon",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setThreadGroup",
        "parameterTypes": [
          "java.lang.ThreadGroup"
        ]
      },
      {
        "name": "setThreadGroupName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setThreadPriority",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.util.ErrorHandler"
  },
  {
    "name": "org.springframework.util.MimeType"
  },
  {
    "name": "org.springframework.util.MultiValueMap"
  },
  {
    "name": "org.springframework.util.PropertiesPersister"
  },
  {
    "name": "org.springframework.util.StringValueResolver"
  },
  {
    "name": "org.springframework.util.concurrent.ListenableFuture"
  },
  {
    "name": "org.springframework.util.concurrent.ListenableFutureTask"
  },
  {
    "name": "org.springframework.util.concurrent.SettableListenableFuture"
  },
  {
    "name": "org.springframework.util.unit.DataSize"
  },
  {
    "name": "org.springframework.validation.Errors"
  },
  {
    "name": "org.springframework.validation.MessageCodesResolver"
  },
  {
    "name": "org.springframework.validation.Validator",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.bind.annotation.CrossOrigin",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "allowCredentials",
        "parameterTypes": []
      },
      {
        "name": "allowedHeaders",
        "parameterTypes": []
      },
      {
        "name": "exposedHeaders",
        "parameterTypes": []
      },
      {
        "name": "maxAge",
        "parameterTypes": []
      },
      {
        "name": "methods",
        "parameterTypes": []
      },
      {
        "name": "originPatterns",
        "parameterTypes": []
      },
      {
        "name": "origins",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.bind.annotation.GetMapping",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "consumes",
        "parameterTypes": []
      },
      {
        "name": "headers",
        "parameterTypes": []
      },
      {
        "name": "name",
        "parameterTypes": []
      },
      {
        "name": "params",
        "parameterTypes": []
      },
      {
        "name": "path",
        "parameterTypes": []
      },
      {
        "name": "produces",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.bind.annotation.Mapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.bind.annotation.ModelAttribute"
  },
  {
    "name": "org.springframework.web.bind.annotation.RequestMapping",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "method",
        "parameterTypes": []
      },
      {
        "name": "path",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.bind.annotation.RequestParam",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "defaultValue",
        "parameterTypes": []
      },
      {
        "name": "name",
        "parameterTypes": []
      },
      {
        "name": "required",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.bind.annotation.ResponseBody",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.bind.annotation.RestController",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.bind.support.ConfigurableWebBindingInitializer"
  },
  {
    "name": "org.springframework.web.bind.support.WebBindingInitializer"
  },
  {
    "name": "org.springframework.web.client.RestTemplate"
  },
  {
    "name": "org.springframework.web.cors.CorsConfiguration"
  },
  {
    "name": "org.springframework.web.cors.reactive.CorsConfigurationSource"
  },
  {
    "name": "org.springframework.web.cors.reactive.CorsProcessor"
  },
  {
    "name": "org.springframework.web.cors.reactive.PreFlightRequestHandler",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.method.HandlerMethod"
  },
  {
    "name": "org.springframework.web.reactive.BindingContext"
  },
  {
    "name": "org.springframework.web.reactive.DispatcherHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      },
      {
        "name": "handlePreFlight",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.HandlerAdapter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.reactive.HandlerMapping",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.reactive.HandlerResult"
  },
  {
    "name": "org.springframework.web.reactive.HandlerResultHandler",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.reactive.accept.RequestedContentTypeResolver",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder"
  },
  {
    "name": "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder$$Lambda$2229/0x00000008016a7dd0",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "resolveMediaTypes",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.config.CorsRegistry"
  },
  {
    "name": "org.springframework.web.reactive.config.DelegatingWebFluxConfiguration",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "configurePathMatching",
        "parameterTypes": [
          "org.springframework.web.reactive.config.PathMatchConfigurer"
        ]
      },
      {
        "name": "setConfigurers",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.config.PathMatchConfigurer"
  },
  {
    "name": "org.springframework.web.reactive.config.ResourceHandlerRegistration"
  },
  {
    "name": "org.springframework.web.reactive.config.ResourceHandlerRegistry"
  },
  {
    "name": "org.springframework.web.reactive.config.ViewResolverRegistry"
  },
  {
    "name": "org.springframework.web.reactive.config.WebFluxConfigurationSupport",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getApplicationContext",
        "parameterTypes": []
      },
      {
        "name": "handlerFunctionAdapter",
        "parameterTypes": []
      },
      {
        "name": "requestMappingHandlerAdapter",
        "parameterTypes": [
          "org.springframework.core.ReactiveAdapterRegistry",
          "org.springframework.http.codec.ServerCodecConfigurer",
          "org.springframework.format.support.FormattingConversionService",
          "org.springframework.validation.Validator"
        ]
      },
      {
        "name": "requestMappingHandlerMapping",
        "parameterTypes": [
          "org.springframework.web.reactive.accept.RequestedContentTypeResolver"
        ]
      },
      {
        "name": "resourceHandlerMapping",
        "parameterTypes": [
          "org.springframework.web.reactive.resource.ResourceUrlProvider"
        ]
      },
      {
        "name": "resourceUrlProvider",
        "parameterTypes": []
      },
      {
        "name": "responseBodyResultHandler",
        "parameterTypes": [
          "org.springframework.core.ReactiveAdapterRegistry",
          "org.springframework.http.codec.ServerCodecConfigurer",
          "org.springframework.web.reactive.accept.RequestedContentTypeResolver"
        ]
      },
      {
        "name": "responseEntityResultHandler",
        "parameterTypes": [
          "org.springframework.core.ReactiveAdapterRegistry",
          "org.springframework.http.codec.ServerCodecConfigurer",
          "org.springframework.web.reactive.accept.RequestedContentTypeResolver"
        ]
      },
      {
        "name": "responseStatusExceptionHandler",
        "parameterTypes": []
      },
      {
        "name": "routerFunctionMapping",
        "parameterTypes": [
          "org.springframework.http.codec.ServerCodecConfigurer"
        ]
      },
      {
        "name": "serverCodecConfigurer",
        "parameterTypes": []
      },
      {
        "name": "serverResponseResultHandler",
        "parameterTypes": [
          "org.springframework.http.codec.ServerCodecConfigurer"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      },
      {
        "name": "simpleHandlerAdapter",
        "parameterTypes": []
      },
      {
        "name": "viewResolutionResultHandler",
        "parameterTypes": [
          "org.springframework.core.ReactiveAdapterRegistry",
          "org.springframework.web.reactive.accept.RequestedContentTypeResolver"
        ]
      },
      {
        "name": "webFluxAdapterRegistry",
        "parameterTypes": []
      },
      {
        "name": "webFluxContentTypeResolver",
        "parameterTypes": []
      },
      {
        "name": "webFluxWebSocketHandlerAdapter",
        "parameterTypes": []
      },
      {
        "name": "webHandler",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.config.WebFluxConfigurationSupport$NoOpValidator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "supports",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "validate",
        "parameterTypes": [
          "java.lang.Object",
          "org.springframework.validation.Errors"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.config.WebFluxConfigurer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.reactive.function.client.ClientRequest"
  },
  {
    "name": "org.springframework.web.reactive.function.client.ClientResponse"
  },
  {
    "name": "org.springframework.web.reactive.function.client.DefaultWebClient",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.reactive.function.client.ExchangeFunction"
  },
  {
    "name": "org.springframework.web.reactive.function.client.WebClient",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.reactive.function.client.WebClient$Builder"
  },
  {
    "name": "org.springframework.web.reactive.function.client.WebClient$RequestBodySpec"
  },
  {
    "name": "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec"
  },
  {
    "name": "org.springframework.web.reactive.function.client.WebClient$RequestHeadersSpec"
  },
  {
    "name": "org.springframework.web.reactive.function.client.WebClient$RequestHeadersUriSpec"
  },
  {
    "name": "org.springframework.web.reactive.function.server.HandlerFunction",
    "queriedMethods": [
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.reactive.function.server.ServerRequest"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.function.server.RequestPredicate"
  },
  {
    "name": "org.springframework.web.reactive.function.server.RouterFunction"
  },
  {
    "name": "org.springframework.web.reactive.function.server.ServerRequest"
  },
  {
    "name": "org.springframework.web.reactive.function.server.ServerResponse"
  },
  {
    "name": "org.springframework.web.reactive.function.server.ServerResponse$BodyBuilder"
  },
  {
    "name": "org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "java.lang.Object"
        ]
      },
      {
        "name": "supports",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.function.server.support.RouterFunctionMapping",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.function.server.support.ServerResponseResultHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "handleResult",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "org.springframework.web.reactive.HandlerResult"
        ]
      },
      {
        "name": "supports",
        "parameterTypes": [
          "org.springframework.web.reactive.HandlerResult"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.handler.AbstractHandlerMapping",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getCorsProcessor",
        "parameterTypes": []
      },
      {
        "name": "getHandler",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "getPathPatternParser",
        "parameterTypes": []
      },
      {
        "name": "setBeanName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setCorsConfigurationSource",
        "parameterTypes": [
          "org.springframework.web.cors.reactive.CorsConfigurationSource"
        ]
      },
      {
        "name": "setCorsConfigurations",
        "parameterTypes": [
          "java.util.Map"
        ]
      },
      {
        "name": "setCorsProcessor",
        "parameterTypes": [
          "org.springframework.web.cors.reactive.CorsProcessor"
        ]
      },
      {
        "name": "setOrder",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setUseCaseSensitiveMatch",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setUseTrailingSlashMatch",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.handler.AbstractUrlHandlerMapping",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getHandlerInternal",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      },
      {
        "name": "getHandlerMap",
        "parameterTypes": []
      },
      {
        "name": "setHandlerPredicate",
        "parameterTypes": [
          "java.util.function.BiPredicate"
        ]
      },
      {
        "name": "setLazyInitHandlers",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.handler.SimpleUrlHandlerMapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.reactive.handler.WebFluxResponseStatusExceptionHandler",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.reactive.resource.ResourceUrlProvider",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "onApplicationEvent",
        "parameterTypes": [
          "org.springframework.context.ApplicationEvent"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.resource.ResourceWebHandler"
  },
  {
    "name": "org.springframework.web.reactive.result.HandlerResultHandlerSupport",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getAdapterRegistry",
        "parameterTypes": []
      },
      {
        "name": "getContentTypeResolver",
        "parameterTypes": []
      },
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "setOrder",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.SimpleHandlerAdapter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "java.lang.Object"
        ]
      },
      {
        "name": "supports",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.condition.RequestCondition"
  },
  {
    "name": "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      },
      {
        "name": "getHandlerMethods",
        "parameterTypes": []
      },
      {
        "name": "registerMapping",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "java.lang.reflect.Method"
        ]
      },
      {
        "name": "unregisterMapping",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$MappingRegistry"
  },
  {
    "name": "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$PreFlightAmbiguousMatchHandler",
    "queriedMethods": [
      {
        "name": "handle",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver"
  },
  {
    "name": "org.springframework.web.reactive.result.method.InvocableHandlerMethod"
  },
  {
    "name": "org.springframework.web.reactive.result.method.RequestMappingInfo"
  },
  {
    "name": "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getHandlerInternal",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$HttpOptionsHandler",
    "queriedMethods": [
      {
        "name": "handle",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.annotation.AbstractMessageWriterResultHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getMessageWriters",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer"
  },
  {
    "name": "org.springframework.web.reactive.result.method.annotation.InitBinderBindingContext"
  },
  {
    "name": "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      },
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "java.lang.Object"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      },
      {
        "name": "supports",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "afterPropertiesSet",
        "parameterTypes": []
      },
      {
        "name": "getContentTypeResolver",
        "parameterTypes": []
      },
      {
        "name": "getPathPrefixes",
        "parameterTypes": []
      },
      {
        "name": "registerMapping",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "java.lang.reflect.Method"
        ]
      },
      {
        "name": "registerMapping",
        "parameterTypes": [
          "org.springframework.web.reactive.result.method.RequestMappingInfo",
          "java.lang.Object",
          "java.lang.reflect.Method"
        ]
      },
      {
        "name": "setContentTypeResolver",
        "parameterTypes": [
          "org.springframework.web.reactive.accept.RequestedContentTypeResolver"
        ]
      },
      {
        "name": "setEmbeddedValueResolver",
        "parameterTypes": [
          "org.springframework.util.StringValueResolver"
        ]
      },
      {
        "name": "setPathPrefixes",
        "parameterTypes": [
          "java.util.Map"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handleResult",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "org.springframework.web.reactive.HandlerResult"
        ]
      },
      {
        "name": "supports",
        "parameterTypes": [
          "org.springframework.web.reactive.HandlerResult"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handleResult",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "org.springframework.web.reactive.HandlerResult"
        ]
      },
      {
        "name": "supports",
        "parameterTypes": [
          "org.springframework.web.reactive.HandlerResult"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.view.View"
  },
  {
    "name": "org.springframework.web.reactive.result.view.ViewResolutionResultHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handleResult",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "org.springframework.web.reactive.HandlerResult"
        ]
      },
      {
        "name": "supports",
        "parameterTypes": [
          "org.springframework.web.reactive.HandlerResult"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.view.ViewResolver"
  },
  {
    "name": "org.springframework.web.reactive.socket.server.WebSocketService"
  },
  {
    "name": "org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getOrder",
        "parameterTypes": []
      },
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "java.lang.Object"
        ]
      },
      {
        "name": "supports",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.socket.server.upgrade.ReactorNettyRequestUpgradeStrategy",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.server.ServerWebExchange"
  },
  {
    "name": "org.springframework.web.server.WebExceptionHandler",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.server.WebFilter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.server.WebFilterChain"
  },
  {
    "name": "org.springframework.web.server.WebHandler",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.server.WebSession"
  },
  {
    "name": "org.springframework.web.server.adapter.ForwardedHeaderTransformer"
  },
  {
    "name": "org.springframework.web.server.adapter.HttpWebHandlerAdapter",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.http.server.reactive.ServerHttpRequest",
          "org.springframework.http.server.reactive.ServerHttpResponse"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.server.handler.ResponseStatusExceptionHandler",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "setWarnLogCategory",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.server.handler.WebHandlerDecorator",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getDelegate",
        "parameterTypes": []
      },
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      },
      {
        "name": "toString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "resolveLocaleContext",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      },
      {
        "name": "setLocaleContext",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "org.springframework.context.i18n.LocaleContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.server.i18n.LocaleContextResolver",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.server.session.CookieWebSessionIdResolver",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "expireSession",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      },
      {
        "name": "resolveSessionIds",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      },
      {
        "name": "setSessionId",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.server.session.DefaultWebSessionManager",
    "queryAllDeclaredMethods": true,
    "queriedMethods": [
      {
        "name": "getSession",
        "parameterTypes": [
          "org.springframework.web.server.ServerWebExchange"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.server.session.WebSessionIdResolver",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.server.session.WebSessionManager",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.web.server.session.WebSessionStore"
  },
  {
    "name": "org.springframework.web.util.UriBuilder"
  },
  {
    "name": "org.springframework.web.util.UriBuilderFactory"
  },
  {
    "name": "org.springframework.web.util.pattern.PathPattern"
  },
  {
    "name": "org.springframework.web.util.pattern.PathPatternParser"
  },
  {
    "name": "org.yaml.snakeyaml.Yaml"
  },
  {
    "name": "reactor.adapter.JdkFlowAdapter",
    "methods": [
      {
        "name": "publisherToFlowPublisher",
        "parameterTypes": [
          "org.reactivestreams.Publisher"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "flowPublisherToFlux",
        "parameterTypes": [
          "java.util.concurrent.Flow$Publisher"
        ]
      }
    ]
  },
  {
    "name": "reactor.core.publisher.Flux"
  },
  {
    "name": "reactor.core.publisher.Hooks",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "reactor.core.publisher.Mono"
  },
  {
    "name": "reactor.core.publisher.Signal"
  },
  {
    "name": "reactor.core.publisher.SourceProducer"
  },
  {
    "name": "reactor.netty.ChannelOperationsId"
  },
  {
    "name": "reactor.netty.Connection"
  },
  {
    "name": "reactor.netty.channel.ChannelOperationsHandler",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "reactor.netty.http.HttpProtocol"
  },
  {
    "name": "reactor.netty.http.client.HttpClient"
  },
  {
    "name": "reactor.netty.http.server.HttpRequestDecoderSpec"
  },
  {
    "name": "reactor.netty.http.server.HttpServer"
  },
  {
    "name": "reactor.netty.http.server.HttpServerResponse"
  },
  {
    "name": "reactor.netty.resources.ConnectionProvider"
  },
  {
    "name": "reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer"
  },
  {
    "name": "reactor.netty.resources.LoopResources"
  },
  {
    "name": "reactor.netty.tcp.SslProvider$SslContextSpec"
  },
  {
    "name": "reactor.netty.transport.ProxyProvider$TypeSpec"
  },
  {
    "name": "reactor.netty.transport.ServerTransport$Acceptor",
    "queriedMethods": [
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "reactor.netty.transport.ServerTransport$AcceptorInitializer"
  },
  {
    "name": "reactor.netty.transport.TransportConfig$TransportChannelInitializer"
  },
  {
    "name": "reactor.util.context.Context"
  },
  {
    "name": "reactor.util.function.Tuple2"
  },
  {
    "name": "scala.Option"
  },
  {
    "name": "scala.util.Properties",
    "methods": [
      {
        "name": "versionNumberString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.management.ClassLoadingImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "sun.management.CompilationImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "sun.management.ManagementFactoryHelper$1",
    "queryAllPublicConstructors": true
  },
  {
    "name": "sun.management.ManagementFactoryHelper$PlatformLoggingImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "sun.management.MemoryImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "sun.management.MemoryManagerImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "sun.management.MemoryPoolImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "sun.management.RuntimeImpl",
    "queryAllPublicConstructors": true
  },
  {
    "name": "sun.misc.Unsafe",
    "fields": [
      {
        "name": "theUnsafe"
      }
    ],
    "methods": [
      {
        "name": "invokeCleaner",
        "parameterTypes": [
          "java.nio.ByteBuffer"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "copyMemory",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "getAndAddLong",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "getAndSetObject",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.nio.ch.Net"
  },
  {
    "name": "sun.nio.ch.SelectorImpl",
    "fields": [
      {
        "name": "publicSelectedKeys"
      },
      {
        "name": "selectedKeys"
      }
    ]
  },
  {
    "name": "sun.nio.ch.SocketChannelImpl"
  },
  {
    "name": "sun.reflect.ReflectionFactory",
    "methods": [
      {
        "name": "getReflectionFactory",
        "parameterTypes": []
      },
      {
        "name": "newConstructorForSerialization",
        "parameterTypes": [
          "java.lang.Class",
          "java.lang.reflect.Constructor"
        ]
      }
    ]
  },
  {
    "name": "sun.security.pkcs12.PKCS12KeyStore",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.pkcs12.PKCS12KeyStore$DualFormatPKCS12",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.JavaKeyStore$JKS",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.NativePRNG",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.NativePRNG$NonBlocking",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.X509Factory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.rsa.RSAKeyFactory$Legacy",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.ssl.KeyManagerFactoryImpl$SunX509",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.ssl.SSLContextImpl$DefaultSSLContext",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.ssl.SSLContextImpl$TLSContext",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.ssl.TrustManagerFactoryImpl$PKIXFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.util.ObjectIdentifier"
  },
  {
    "name": "sun.security.x509.AuthorityInfoAccessExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.AuthorityKeyIdentifierExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.BasicConstraintsExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.CRLDistributionPointsExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.CertificateExtensions"
  },
  {
    "name": "sun.security.x509.CertificatePoliciesExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.ExtendedKeyUsageExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.IssuerAlternativeNameExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.KeyUsageExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.NetscapeCertTypeExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.PrivateKeyUsageExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.SubjectAlternativeNameExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.SubjectKeyIdentifierExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "zipkin2.Endpoint"
  }
]
